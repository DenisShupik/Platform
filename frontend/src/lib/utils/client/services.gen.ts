// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetCategoryStatsData, GetCategoryStatsError, GetCategoryStatsResponse, GetCategoryData, GetCategoryError, GetCategoryResponse, GetCategoryThreadsCountData, GetCategoryThreadsCountError, GetCategoryThreadsCountResponse, GetCategoryThreadsData, GetCategoryThreadsError, GetCategoryThreadsResponse, CreateCategoryData, CreateCategoryError, CreateCategoryResponse, GetForumsData, GetForumsError, GetForumsResponse, CreateForumData, CreateForumError, CreateForumResponse, GetForumData, GetForumError, GetForumResponse, GetPostsData, GetPostsError, GetPostsResponse, GetThreadData, GetThreadError, GetThreadResponse, GetThreadPostsCountData, GetThreadPostsCountError, GetThreadPostsCountResponse2, GetThreadPostsData, GetThreadPostsError, GetThreadPostsResponse, CreatePostData, CreatePostError, CreatePostResponse, CreateThreadData, CreateThreadError, CreateThreadResponse, UploadAvatarData, UploadAvatarError, UploadAvatarResponse, DeleteAvatarError, DeleteAvatarResponse, GetUsersData, GetUsersError, GetUsersResponse, GetUserData, GetUserError, GetUserResponse } from './types.gen';

export const client = createClient(createConfig());

export const getCategoryStats = <ThrowOnError extends boolean = false>(options: Options<GetCategoryStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryStatsResponse, GetCategoryStatsError, ThrowOnError>({
        ...options,
        url: '/api/categories/{categoryIds}/stats'
    });
};

export const getCategory = <ThrowOnError extends boolean = false>(options: Options<GetCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryResponse, GetCategoryError, ThrowOnError>({
        ...options,
        url: '/api/categories/{categoryId}'
    });
};

export const getCategoryThreadsCount = <ThrowOnError extends boolean = false>(options: Options<GetCategoryThreadsCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryThreadsCountResponse, GetCategoryThreadsCountError, ThrowOnError>({
        ...options,
        url: '/api/categories/{categoryId}/threads/count'
    });
};

export const getCategoryThreads = <ThrowOnError extends boolean = false>(options: Options<GetCategoryThreadsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryThreadsResponse, GetCategoryThreadsError, ThrowOnError>({
        ...options,
        url: '/api/categories/{categoryId}/thread'
    });
};

export const createCategory = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCategoryResponse, CreateCategoryError, ThrowOnError>({
        ...options,
        url: '/api/categories'
    });
};

export const getForums = <ThrowOnError extends boolean = false>(options?: Options<GetForumsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForumsResponse, GetForumsError, ThrowOnError>({
        ...options,
        url: '/api/forums'
    });
};

export const createForum = <ThrowOnError extends boolean = false>(options: Options<CreateForumData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateForumResponse, CreateForumError, ThrowOnError>({
        ...options,
        url: '/api/forums'
    });
};

export const getForum = <ThrowOnError extends boolean = false>(options: Options<GetForumData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForumResponse, GetForumError, ThrowOnError>({
        ...options,
        url: '/api/forums/{forumId}'
    });
};

export const getPosts = <ThrowOnError extends boolean = false>(options: Options<GetPostsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPostsResponse, GetPostsError, ThrowOnError>({
        ...options,
        url: '/api/posts'
    });
};

export const getThread = <ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadResponse, GetThreadError, ThrowOnError>({
        ...options,
        url: '/api/threads/{threadId}'
    });
};

export const getThreadPostsCount = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadPostsCountResponse2, GetThreadPostsCountError, ThrowOnError>({
        ...options,
        url: '/api/threads/{threadIds}/posts/count'
    });
};

export const getThreadPosts = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadPostsResponse, GetThreadPostsError, ThrowOnError>({
        ...options,
        url: '/api/threads/{threadId}/posts'
    });
};

export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePostResponse, CreatePostError, ThrowOnError>({
        ...options,
        url: '/api/threads/{threadId}/posts'
    });
};

export const createThread = <ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateThreadResponse, CreateThreadError, ThrowOnError>({
        ...options,
        url: '/api/threads'
    });
};

export const uploadAvatar = <ThrowOnError extends boolean = false>(options?: Options<UploadAvatarData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadAvatarResponse, UploadAvatarError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/api/avatars'
    });
};

export const deleteAvatar = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAvatarResponse, DeleteAvatarError, ThrowOnError>({
        ...options,
        url: '/api/avatars'
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        ...options,
        url: '/api/users'
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/api/users/{userId}'
    });
};