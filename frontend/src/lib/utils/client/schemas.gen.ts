// This file is auto-generated by @hey-api/openapi-ts

export const ActivityDtoSchema = {
    required: ['$type'],
    type: 'object',
    anyOf: [
        {
            '$ref': '#/components/schemas/ActivityDtoPostAddedActivityDto'
        }
    ],
    discriminator: {
        propertyName: '$type',
        mapping: {
            PostAdded: '#/components/schemas/ActivityDtoPostAddedActivityDto'
        }
    }
} as const;

export const ActivityDtoPostAddedActivityDtoSchema = {
    required: ['forumId', 'categoryId', 'threadId', 'postId', 'occurredBy', 'occurredAt', '$type'],
    properties: {
        '$type': {
            enum: ['PostAdded'],
            type: 'string'
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        occurredBy: {
            '$ref': '#/components/schemas/UserId'
        },
        occurredAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const ActivityTypeSchema = {
    enum: [0],
    type: 'integer',
    'x-enum-varnames': ['PostAdded']
} as const;

export const CategoryDtoSchema = {
    required: ['categoryId', 'forumId', 'title', 'createdBy', 'createdAt'],
    type: 'object',
    properties: {
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/CategoryTitle'
        },
        createdBy: {
            '$ref': '#/components/schemas/UserId'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const CategoryIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const CategoryNotFoundErrorSchema = {
    required: ['categoryId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        }
    }
} as const;

export const CategoryTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const CreateCategoryRequestBodySchema = {
    required: ['forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/CategoryTitle'
        }
    }
} as const;

export const CreateForumRequestBodySchema = {
    required: ['title'],
    type: 'object',
    properties: {
        title: {
            '$ref': '#/components/schemas/ForumTitle'
        }
    }
} as const;

export const CreatePostRequestBodySchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            '$ref': '#/components/schemas/PostContent'
        }
    }
} as const;

export const CreateThreadRequestBodySchema = {
    required: ['categoryId', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        title: {
            '$ref': '#/components/schemas/ThreadTitle'
        }
    }
} as const;

export const ForumDtoSchema = {
    required: ['forumId', 'title', 'createdBy', 'createdAt'],
    type: 'object',
    properties: {
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/ForumTitle'
        },
        createdBy: {
            '$ref': '#/components/schemas/UserId'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const ForumIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const ForumNotFoundErrorSchema = {
    required: ['forumId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        }
    }
} as const;

export const ForumTitleSchema = {
    maxLength: 64,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const GetActivitiesPagedQueryGroupByTypeSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    'x-enum-varnames': ['Forum', 'Category', 'Thread']
} as const;

export const GetActivitiesPagedQueryModeTypeSchema = {
    enum: [0],
    type: 'integer',
    'x-enum-varnames': ['Latest']
} as const;

export const GetActivitiesPagedQuerySortTypeSchema = {
    enum: ['latest', '-latest'],
    type: 'string',
    'x-enum-varnames': ['LatestAsc', 'LatestDesc'],
    'x-enum-descriptions': ['Sort by Latest ascending', 'Sort by Latest descending']
} as const;

export const GetCategoriesPagedQuerySortTypeSchema = {
    enum: ['categoryid', 'forumid', '-categoryid', '-forumid'],
    type: 'string',
    'x-enum-varnames': ['CategoryIdAsc', 'ForumIdAsc', 'CategoryIdDesc', 'ForumIdDesc'],
    'x-enum-descriptions': ['Sort by CategoryId ascending', 'Sort by ForumId ascending', 'Sort by CategoryId descending', 'Sort by ForumId descending']
} as const;

export const GetCategoryThreadsPagedQuerySortTypeSchema = {
    enum: ['activity', '-activity'],
    type: 'string',
    'x-enum-varnames': ['ActivityAsc', 'ActivityDesc'],
    'x-enum-descriptions': ['Sort by Activity ascending', 'Sort by Activity descending']
} as const;

export const GetForumsPagedQuerySortTypeSchema = {
    enum: ['forumid', '-forumid'],
    type: 'string',
    'x-enum-varnames': ['ForumIdAsc', 'ForumIdDesc'],
    'x-enum-descriptions': ['Sort by ForumId ascending', 'Sort by ForumId descending']
} as const;

export const GetThreadPostsPagedQuerySortTypeSchema = {
    enum: ['index', '-index'],
    type: 'string',
    'x-enum-varnames': ['IndexAsc', 'IndexDesc'],
    'x-enum-descriptions': ['Sort by Index ascending', 'Sort by Index descending']
} as const;

export const GetThreadsPagedQuerySortTypeSchema = {
    enum: ['threadid', '-threadid'],
    type: 'string',
    'x-enum-varnames': ['ThreadIdAsc', 'ThreadIdDesc'],
    'x-enum-descriptions': ['Sort by ThreadId ascending', 'Sort by ThreadId descending']
} as const;

export const NonPostAuthorErrorSchema = {
    required: ['threadId', 'postId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const NonThreadOwnerErrorSchema = {
    required: ['threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const NotOwnerErrorSchema = {
    required: ['$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        }
    }
} as const;

export const PaginationLimitMin10Max100Schema = {
    maximum: 100,
    minimum: 10,
    type: 'integer'
} as const;

export const PaginationOffsetSchema = {
    maximum: 2147483647,
    minimum: 0,
    type: 'integer',
    default: 0
} as const;

export const PostContentSchema = {
    maxLength: 1024,
    minLength: 2,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const PostDtoSchema = {
    required: ['postId', 'threadId', 'content', 'createdBy', 'createdAt', 'updatedBy', 'updatedAt', 'rowVersion'],
    type: 'object',
    properties: {
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        content: {
            '$ref': '#/components/schemas/PostContent'
        },
        createdBy: {
            '$ref': '#/components/schemas/UserId'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedBy: {
            '$ref': '#/components/schemas/UserId'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const PostIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const PostIndexSchema = {
    type: 'integer',
    format: 'uint64'
} as const;

export const PostNotFoundErrorSchema = {
    required: ['postId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const PostStaleErrorSchema = {
    required: ['threadId', 'postId', 'rowVersion', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const ThreadDtoSchema = {
    required: ['threadId', 'categoryId', 'title', 'createdBy', 'createdAt', 'status'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        title: {
            '$ref': '#/components/schemas/ThreadTitle'
        },
        createdBy: {
            '$ref': '#/components/schemas/UserId'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            '$ref': '#/components/schemas/ThreadStatus'
        }
    }
} as const;

export const ThreadIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const ThreadNotFoundErrorSchema = {
    required: ['threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const ThreadStatusSchema = {
    enum: [0, 1],
    type: 'integer',
    'x-enum-varnames': ['Draft', 'Published']
} as const;

export const ThreadTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const UpdatePostRequestBodySchema = {
    required: ['content', 'rowVersion'],
    type: 'object',
    properties: {
        content: {
            '$ref': '#/components/schemas/PostContent'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const UserIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const IFormFileSchema = {
    type: 'string',
    format: 'binary'
} as const;

export const ChannelTypeSchema = {
    enum: [0, 1],
    type: 'integer',
    'x-enum-varnames': ['Internal', 'Email']
} as const;

export const CreateThreadSubscriptionRequestBodySchema = {
    required: ['channels'],
    type: 'object',
    properties: {
        channels: {
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChannelType'
            }
        }
    }
} as const;

export const DuplicateThreadSubscriptionErrorSchema = {
    required: ['userId', 'threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const GetInternalNotificationsPagedQuerySortTypeSchema = {
    enum: ['occurredat', 'deliveredat', '-occurredat', '-deliveredat'],
    type: 'string',
    'x-enum-varnames': ['OccurredAtAsc', 'DeliveredAtAsc', 'OccurredAtDesc', 'DeliveredAtDesc'],
    'x-enum-descriptions': ['Sort by OccurredAt ascending', 'Sort by DeliveredAt ascending', 'Sort by OccurredAt descending', 'Sort by DeliveredAt descending']
} as const;

export const GetThreadSubscriptionStatusQueryResultSchema = {
    required: ['isSubscribed'],
    type: 'object',
    properties: {
        isSubscribed: {
            type: 'boolean'
        }
    }
} as const;

export const InternalNotificationDtoSchema = {
    required: ['payload', 'occurredAt', 'notifiableEventId'],
    type: 'object',
    properties: {
        payload: {
            '$ref': '#/components/schemas/NotifiableEventPayload'
        },
        occurredAt: {
            type: 'string',
            format: 'date-time'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        deliveredAt: {
            type: ['null', 'string'],
            format: 'date-time'
        }
    }
} as const;

export const InternalNotificationsPagedDtoSchema = {
    required: ['notifications', 'threads', 'users', 'totalCount'],
    type: 'object',
    properties: {
        notifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InternalNotificationDto'
            }
        },
        threads: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ThreadTitle'
            },
            unrecognizedKeywords: {
                propertyNames: {
                    '$ref': '#/components/schemas/ThreadId'
                }
            }
        },
        users: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Username'
            },
            unrecognizedKeywords: {
                propertyNames: {
                    '$ref': '#/components/schemas/UserId'
                }
            }
        },
        totalCount: {
            type: 'integer',
            format: 'uint64'
        }
    }
} as const;

export const NotifiableEventIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const NotifiableEventPayloadSchema = {
    required: ['$type'],
    type: 'object',
    anyOf: [
        {
            '$ref': '#/components/schemas/NotifiableEventPayloadPostAddedNotifiableEventPayload'
        },
        {
            '$ref': '#/components/schemas/NotifiableEventPayloadPostUpdatedNotifiableEventPayload'
        }
    ],
    discriminator: {
        propertyName: '$type',
        mapping: {
            PostAdded: '#/components/schemas/NotifiableEventPayloadPostAddedNotifiableEventPayload',
            PostUpdated: '#/components/schemas/NotifiableEventPayloadPostUpdatedNotifiableEventPayload'
        }
    }
} as const;

export const NotifiableEventPayloadPostAddedNotifiableEventPayloadSchema = {
    required: ['threadId', 'postId', 'createdBy', '$type'],
    properties: {
        '$type': {
            enum: ['PostAdded'],
            type: 'string'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        createdBy: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const NotifiableEventPayloadPostUpdatedNotifiableEventPayloadSchema = {
    required: ['threadId', 'postId', 'updatedBy', '$type'],
    properties: {
        '$type': {
            enum: ['PostUpdated'],
            type: 'string'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        updatedBy: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const NotificationNotFoundErrorSchema = {
    required: ['userId', 'notifiableEventId', 'channel', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        channel: {
            '$ref': '#/components/schemas/ChannelType'
        }
    }
} as const;

export const ThreadSubscriptionNotFoundErrorSchema = {
    required: ['userId', 'threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const UsernameSchema = {
    maxLength: 64,
    minLength: 3,
    pattern: '^[a-z0-9]+(_[a-z0-9]+)*$',
    type: 'string'
} as const;

export const GetUsersPagedQuerySortTypeSchema = {
    enum: ['userid', '-userid'],
    type: 'string',
    'x-enum-varnames': ['UserIdAsc', 'UserIdDesc'],
    'x-enum-descriptions': ['Sort by UserId ascending', 'Sort by UserId descending']
} as const;

export const UserDtoSchema = {
    required: ['userId', 'username', 'email', 'enabled', 'createdAt'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        username: {
            '$ref': '#/components/schemas/Username'
        },
        email: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const UserNotFoundErrorSchema = {
    required: ['userId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const CategoryNotFoundErrorWritableSchema = {
    required: ['categoryId'],
    type: 'object',
    properties: {
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        }
    }
} as const;

export const ForumNotFoundErrorWritableSchema = {
    required: ['forumId'],
    type: 'object',
    properties: {
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        }
    }
} as const;

export const NonPostAuthorErrorWritableSchema = {
    required: ['threadId', 'postId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const NonThreadOwnerErrorWritableSchema = {
    required: ['threadId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const PostNotFoundErrorWritableSchema = {
    required: ['postId'],
    type: 'object',
    properties: {
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const PostStaleErrorWritableSchema = {
    required: ['threadId', 'postId', 'rowVersion'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const ThreadNotFoundErrorWritableSchema = {
    required: ['threadId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const DuplicateThreadSubscriptionErrorWritableSchema = {
    required: ['userId', 'threadId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const NotificationNotFoundErrorWritableSchema = {
    required: ['userId', 'notifiableEventId', 'channel'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        channel: {
            '$ref': '#/components/schemas/ChannelType'
        }
    }
} as const;

export const ThreadSubscriptionNotFoundErrorWritableSchema = {
    required: ['userId', 'threadId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const UserNotFoundErrorWritableSchema = {
    required: ['userId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;
