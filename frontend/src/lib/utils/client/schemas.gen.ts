// This file is auto-generated by @hey-api/openapi-ts

export const CategoryDtoSchema = {
    required: ['categoryId', 'forumId', 'title', 'createdAt', 'readPolicyId', 'threadCreatePolicyId', 'postCreatePolicyId'],
    type: 'object',
    properties: {
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/CategoryTitle'
        },
        createdBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        readPolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        threadCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        postCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        }
    }
} as const;

export const CategoryIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const CategoryNotFoundErrorSchema = {
    required: ['categoryId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        }
    }
} as const;

export const CategoryTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const CreateCategoryRequestBodySchema = {
    required: ['readPolicyValue', 'threadCreatePolicyValue', 'postCreatePolicyValue', 'forumId', 'title'],
    type: 'object',
    properties: {
        readPolicyValue: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PolicyValue'
                },
                {
                    type: 'null'
                }
            ]
        },
        threadCreatePolicyValue: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PolicyValue'
                },
                {
                    type: 'null'
                }
            ]
        },
        postCreatePolicyValue: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PolicyValue'
                },
                {
                    type: 'null'
                }
            ]
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/CategoryTitle'
        }
    }
} as const;

export const CreateForumRequestBodySchema = {
    required: ['title', 'readPolicyValue', 'categoryCreatePolicyValue', 'threadCreatePolicyValue', 'postCreatePolicyValue'],
    type: 'object',
    properties: {
        title: {
            '$ref': '#/components/schemas/ForumTitle'
        },
        readPolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        },
        categoryCreatePolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        },
        threadCreatePolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        },
        postCreatePolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        }
    }
} as const;

export const CreatePostRequestBodySchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            '$ref': '#/components/schemas/PostContent'
        }
    }
} as const;

export const CreateThreadRequestBodySchema = {
    required: ['readPolicyValue', 'postCreatePolicyValue', 'categoryId', 'title'],
    type: 'object',
    properties: {
        readPolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        },
        postCreatePolicyValue: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyValue'
                }
            ]
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        title: {
            '$ref': '#/components/schemas/ThreadTitle'
        }
    }
} as const;

export const ForumDtoSchema = {
    required: ['forumId', 'title', 'createdAt', 'readPolicyId', 'categoryCreatePolicyId', 'threadCreatePolicyId', 'postCreatePolicyId'],
    type: 'object',
    properties: {
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        },
        title: {
            '$ref': '#/components/schemas/ForumTitle'
        },
        createdBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        readPolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        categoryCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        threadCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        postCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        }
    }
} as const;

export const ForumIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const ForumNotFoundErrorSchema = {
    required: ['forumId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        }
    }
} as const;

export const ForumTitleSchema = {
    maxLength: 64,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const GetCategoriesPagedQuerySortTypeSchema = {
    enum: ['categoryId', 'forumId', '-categoryId', '-forumId'],
    type: 'string',
    'x-enum-varnames': ['CATEGORY_ID_ASC', 'FORUM_ID_ASC', 'CATEGORY_ID_DESC', 'FORUM_ID_DESC'],
    'x-enum-descriptions': ['Sort by CategoryId ascending', 'Sort by ForumId ascending', 'Sort by CategoryId descending', 'Sort by ForumId descending']
} as const;

export const GetCategoryThreadsPagedQuerySortTypeSchema = {
    enum: ['activity', '-activity'],
    type: 'string',
    'x-enum-varnames': ['ACTIVITY_ASC', 'ACTIVITY_DESC'],
    'x-enum-descriptions': ['Sort by Activity ascending', 'Sort by Activity descending']
} as const;

export const GetForumsPagedQuerySortTypeSchema = {
    enum: ['forumId', '-forumId'],
    type: 'string',
    'x-enum-varnames': ['FORUM_ID_ASC', 'FORUM_ID_DESC'],
    'x-enum-descriptions': ['Sort by ForumId ascending', 'Sort by ForumId descending']
} as const;

export const GetThreadPostsPagedQuerySortTypeSchema = {
    enum: ['index', '-index'],
    type: 'string',
    'x-enum-varnames': ['INDEX_ASC', 'INDEX_DESC'],
    'x-enum-descriptions': ['Sort by Index ascending', 'Sort by Index descending']
} as const;

export const GetThreadsPagedQuerySortTypeSchema = {
    enum: ['threadId', '-threadId'],
    type: 'string',
    'x-enum-varnames': ['THREAD_ID_ASC', 'THREAD_ID_DESC'],
    'x-enum-descriptions': ['Sort by ThreadId ascending', 'Sort by ThreadId descending']
} as const;

export const NonPostAuthorErrorSchema = {
    required: ['threadId', 'postId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const NonThreadOwnerErrorSchema = {
    required: ['threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const NotAdminErrorSchema = {
    required: ['$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        }
    }
} as const;

export const NotOwnerErrorSchema = {
    required: ['$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        }
    }
} as const;

export const PaginationLimitMin10Max100Schema = {
    maximum: 100,
    minimum: 10,
    type: 'integer'
} as const;

export const PaginationOffsetSchema = {
    maximum: 2147483647,
    minimum: 0,
    type: 'integer',
    default: 0
} as const;

export const PolicyDowngradeErrorSchema = {
    required: ['$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        }
    }
} as const;

export const PolicyDtoSchema = {
    required: ['policyId', 'type', 'value'],
    type: 'object',
    properties: {
        policyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        type: {
            '$ref': '#/components/schemas/PolicyType'
        },
        value: {
            '$ref': '#/components/schemas/PolicyValue'
        },
        parentId: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/PolicyId'
                }
            ]
        }
    }
} as const;

export const PolicyIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const PolicyNotFoundErrorSchema = {
    required: ['policyId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        policyId: {
            '$ref': '#/components/schemas/PolicyId'
        }
    }
} as const;

export const PolicyRestrictedErrorSchema = {
    required: ['policyType', 'userId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        policyType: {
            '$ref': '#/components/schemas/PolicyType'
        },
        userId: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        }
    }
} as const;

export const PolicyTypeSchema = {
    enum: ['read', 'forumCreate', 'categoryCreate', 'threadCreate', 'threadApprove', 'postCreate'],
    type: 'string',
    'x-enum-varnames': ['READ', 'FORUM_CREATE', 'CATEGORY_CREATE', 'THREAD_CREATE', 'THREAD_APPROVE', 'POST_CREATE']
} as const;

export const PolicyValueSchema = {
    enum: ['any', 'authenticated', 'granted'],
    type: 'string',
    'x-enum-varnames': ['ANY', 'AUTHENTICATED', 'GRANTED']
} as const;

export const PolicyViolationErrorSchema = {
    required: ['policyId', 'userId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        policyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const PortalDtoSchema = {
    required: ['readPolicy', 'forumCreatePolicy', 'categotyCreatePolicy', 'threadCreatePolicy', 'postCreatePolicy'],
    type: 'object',
    properties: {
        readPolicy: {
            '$ref': '#/components/schemas/PolicyValue'
        },
        forumCreatePolicy: {
            '$ref': '#/components/schemas/PolicyValue'
        },
        categotyCreatePolicy: {
            '$ref': '#/components/schemas/PolicyValue'
        },
        threadCreatePolicy: {
            '$ref': '#/components/schemas/PolicyValue'
        },
        postCreatePolicy: {
            '$ref': '#/components/schemas/PolicyValue'
        }
    }
} as const;

export const PostContentSchema = {
    maxLength: 1024,
    minLength: 2,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const PostDtoSchema = {
    required: ['postId', 'threadId', 'content', 'createdAt', 'updatedAt', 'rowVersion'],
    type: 'object',
    properties: {
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        content: {
            '$ref': '#/components/schemas/PostContent'
        },
        createdBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const PostIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const PostIndexSchema = {
    type: 'integer',
    format: 'uint64'
} as const;

export const PostNotFoundErrorSchema = {
    required: ['postId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const PostStaleErrorSchema = {
    required: ['threadId', 'postId', 'rowVersion', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const ThreadDtoSchema = {
    required: ['threadId', 'categoryId', 'title', 'createdAt', 'status', 'readPolicyId', 'postCreatePolicyId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        },
        title: {
            '$ref': '#/components/schemas/ThreadTitle'
        },
        createdBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            '$ref': '#/components/schemas/ThreadStatus'
        },
        readPolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        postCreatePolicyId: {
            '$ref': '#/components/schemas/PolicyId'
        }
    }
} as const;

export const ThreadIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const ThreadNotFoundErrorSchema = {
    required: ['threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const ThreadStatusSchema = {
    enum: ['draft', 'published'],
    type: 'string',
    'x-enum-varnames': ['DRAFT', 'PUBLISHED']
} as const;

export const ThreadTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string'
} as const;

export const UpdatePostRequestBodySchema = {
    required: ['content', 'rowVersion'],
    type: 'object',
    properties: {
        content: {
            '$ref': '#/components/schemas/PostContent'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const UserIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const IFormFileSchema = {
    type: 'string',
    format: 'binary'
} as const;

export const ChannelTypeSchema = {
    enum: ['internal', 'email'],
    type: 'string',
    'x-enum-varnames': ['INTERNAL', 'EMAIL']
} as const;

export const CreateThreadSubscriptionRequestBodySchema = {
    required: ['channels'],
    type: 'object',
    properties: {
        channels: {
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChannelType'
            }
        }
    }
} as const;

export const DuplicateThreadSubscriptionErrorSchema = {
    required: ['userId', 'threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const GetInternalNotificationsPagedQuerySortTypeSchema = {
    enum: ['occurredAt', 'deliveredAt', '-occurredAt', '-deliveredAt'],
    type: 'string',
    'x-enum-varnames': ['OCCURRED_AT_ASC', 'DELIVERED_AT_ASC', 'OCCURRED_AT_DESC', 'DELIVERED_AT_DESC'],
    'x-enum-descriptions': ['Sort by OccurredAt ascending', 'Sort by DeliveredAt ascending', 'Sort by OccurredAt descending', 'Sort by DeliveredAt descending']
} as const;

export const GetThreadSubscriptionStatusQueryResultSchema = {
    required: ['isSubscribed'],
    type: 'object',
    properties: {
        isSubscribed: {
            type: 'boolean'
        }
    }
} as const;

export const InternalNotificationDtoSchema = {
    required: ['payload', 'occurredAt', 'notifiableEventId'],
    type: 'object',
    properties: {
        payload: {
            '$ref': '#/components/schemas/NotifiableEventPayload'
        },
        occurredAt: {
            type: 'string',
            format: 'date-time'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        deliveredAt: {
            type: ['null', 'string'],
            format: 'date-time'
        }
    }
} as const;

export const InternalNotificationsPagedDtoSchema = {
    required: ['notifications', 'threads', 'users', 'totalCount'],
    type: 'object',
    properties: {
        notifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InternalNotificationDto'
            }
        },
        threads: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ThreadTitle'
            },
            unrecognizedKeywords: {
                propertyNames: {
                    '$ref': '#/components/schemas/ThreadId'
                }
            }
        },
        users: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Username'
            },
            unrecognizedKeywords: {
                propertyNames: {
                    '$ref': '#/components/schemas/UserId'
                }
            }
        },
        totalCount: {
            type: 'integer',
            format: 'uint64'
        }
    }
} as const;

export const NotifiableEventIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    format: 'uuid'
} as const;

export const NotifiableEventPayloadSchema = {
    required: ['$type'],
    type: 'object',
    anyOf: [
        {
            '$ref': '#/components/schemas/NotifiableEventPayloadPostAddedNotifiableEventPayload'
        },
        {
            '$ref': '#/components/schemas/NotifiableEventPayloadPostUpdatedNotifiableEventPayload'
        }
    ],
    discriminator: {
        propertyName: '$type',
        mapping: {
            PostAdded: '#/components/schemas/NotifiableEventPayloadPostAddedNotifiableEventPayload',
            PostUpdated: '#/components/schemas/NotifiableEventPayloadPostUpdatedNotifiableEventPayload'
        }
    }
} as const;

export const NotifiableEventPayloadPostAddedNotifiableEventPayloadSchema = {
    required: ['threadId', 'postId', 'createdBy', '$type'],
    properties: {
        '$type': {
            enum: ['PostAdded'],
            type: 'string'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        createdBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        }
    }
} as const;

export const NotifiableEventPayloadPostUpdatedNotifiableEventPayloadSchema = {
    required: ['threadId', 'postId', 'updatedBy', '$type'],
    properties: {
        '$type': {
            enum: ['PostUpdated'],
            type: 'string'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        updatedBy: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        }
    }
} as const;

export const NotificationNotFoundErrorSchema = {
    required: ['userId', 'notifiableEventId', 'channel', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        channel: {
            '$ref': '#/components/schemas/ChannelType'
        }
    }
} as const;

export const ThreadSubscriptionNotFoundErrorSchema = {
    required: ['userId', 'threadId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const UsernameSchema = {
    maxLength: 64,
    minLength: 3,
    pattern: '^[a-z0-9]+(_[a-z0-9]+)*$',
    type: 'string'
} as const;

export const GetUsersPagedQuerySortTypeSchema = {
    enum: ['userId', '-userId'],
    type: 'string',
    'x-enum-varnames': ['USER_ID_ASC', 'USER_ID_DESC'],
    'x-enum-descriptions': ['Sort by UserId ascending', 'Sort by UserId descending']
} as const;

export const UserDtoSchema = {
    required: ['userId', 'username', 'email', 'enabled', 'createdAt'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        username: {
            '$ref': '#/components/schemas/Username'
        },
        email: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const UserNotFoundErrorSchema = {
    required: ['userId', '$type'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const CategoryNotFoundErrorWritableSchema = {
    required: ['categoryId'],
    type: 'object',
    properties: {
        categoryId: {
            '$ref': '#/components/schemas/CategoryId'
        }
    }
} as const;

export const ForumNotFoundErrorWritableSchema = {
    required: ['forumId'],
    type: 'object',
    properties: {
        forumId: {
            '$ref': '#/components/schemas/ForumId'
        }
    }
} as const;

export const NonPostAuthorErrorWritableSchema = {
    required: ['threadId', 'postId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const NonThreadOwnerErrorWritableSchema = {
    required: ['threadId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const PolicyNotFoundErrorWritableSchema = {
    required: ['policyId'],
    type: 'object',
    properties: {
        policyId: {
            '$ref': '#/components/schemas/PolicyId'
        }
    }
} as const;

export const PolicyRestrictedErrorWritableSchema = {
    required: ['policyType', 'userId'],
    type: 'object',
    properties: {
        policyType: {
            '$ref': '#/components/schemas/PolicyType'
        },
        userId: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        }
    }
} as const;

export const PolicyViolationErrorWritableSchema = {
    required: ['policyId', 'userId'],
    type: 'object',
    properties: {
        policyId: {
            '$ref': '#/components/schemas/PolicyId'
        },
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;

export const PostNotFoundErrorWritableSchema = {
    required: ['postId'],
    type: 'object',
    properties: {
        postId: {
            '$ref': '#/components/schemas/PostId'
        }
    }
} as const;

export const PostStaleErrorWritableSchema = {
    required: ['threadId', 'postId', 'rowVersion'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        },
        postId: {
            '$ref': '#/components/schemas/PostId'
        },
        rowVersion: {
            type: 'integer',
            format: 'uint32'
        }
    }
} as const;

export const ThreadNotFoundErrorWritableSchema = {
    required: ['threadId'],
    type: 'object',
    properties: {
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const DuplicateThreadSubscriptionErrorWritableSchema = {
    required: ['userId', 'threadId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const NotificationNotFoundErrorWritableSchema = {
    required: ['userId', 'notifiableEventId', 'channel'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        notifiableEventId: {
            '$ref': '#/components/schemas/NotifiableEventId'
        },
        channel: {
            '$ref': '#/components/schemas/ChannelType'
        }
    }
} as const;

export const ThreadSubscriptionNotFoundErrorWritableSchema = {
    required: ['userId', 'threadId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        },
        threadId: {
            '$ref': '#/components/schemas/ThreadId'
        }
    }
} as const;

export const UserNotFoundErrorWritableSchema = {
    required: ['userId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/UserId'
        }
    }
} as const;
