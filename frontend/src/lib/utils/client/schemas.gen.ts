// This file is auto-generated by @hey-api/openapi-ts

export const CategorySchema = {
    required: ['categoryId', 'created', 'createdBy', 'forumId', 'threads', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            description: 'Идентификатор категории',
            format: 'int64'
        },
        forumId: {
            type: 'integer',
            description: 'Идентификатор раздела',
            format: 'int64'
        },
        title: {
            type: 'string',
            description: 'Наименование категории'
        },
        created: {
            type: 'string',
            description: 'Дата и время создания категории',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            description: 'Идентификатор пользователя, создавшего категорию',
            format: 'uuid'
        },
        threads: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Thread'
            },
            description: 'Темы категории'
        }
    },
    additionalProperties: false,
    description: 'Категория'
} as const;

export const CategoryKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Category'
            }
        }
    },
    additionalProperties: false
} as const;

export const CreateCategoryRequestSchema = {
    required: ['forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            type: 'integer',
            description: 'Идентификатор раздела',
            format: 'int64'
        },
        title: {
            type: 'string',
            description: 'Наименование категории'
        }
    },
    additionalProperties: false
} as const;

export const CreateForumRequestSchema = {
    required: ['title'],
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: 'Наименование раздела'
        }
    },
    additionalProperties: false
} as const;

export const CreateThreadRequestSchema = {
    required: ['categoryId', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            description: 'Идентификатор категории',
            format: 'int64'
        },
        title: {
            type: 'string',
            description: 'Название темы'
        }
    },
    additionalProperties: false
} as const;

export const FilterTypeSchema = {
    enum: ['CategoryLatest', 'ThreadLatest'],
    type: 'string'
} as const;

export const ForumSchema = {
    required: ['categories', 'created', 'createdBy', 'forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            type: 'integer',
            description: 'Идентификатор раздела',
            format: 'int64'
        },
        title: {
            type: 'string',
            description: 'Наименование раздела'
        },
        created: {
            type: 'string',
            description: 'Дата и время создания раздела',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            description: 'Идентификатор пользователя, создавшего раздел',
            format: 'uuid'
        },
        categories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Category'
            },
            description: 'Категории раздела'
        }
    },
    additionalProperties: false,
    description: 'Раздел'
} as const;

export const ForumKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Forum'
            }
        }
    },
    additionalProperties: false
} as const;

export const FromBodySchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            type: 'string',
            description: 'Содержимое сообщения'
        }
    },
    additionalProperties: false
} as const;

export const GetCategoryPostsResponseSchema = {
    required: ['categoryId', 'post'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        post: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Post'
                }
            ],
            description: 'Сообщение'
        }
    },
    additionalProperties: false
} as const;

export const GetThreadPostsCountResponseSchema = {
    required: ['count', 'threadId'],
    type: 'object',
    properties: {
        threadId: {
            type: 'integer',
            format: 'int64'
        },
        count: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PostSchema = {
    required: ['content', 'created', 'createdBy', 'postId', 'threadId'],
    type: 'object',
    properties: {
        postId: {
            type: 'integer',
            description: 'Идентификатор сообщения',
            format: 'int64'
        },
        threadId: {
            type: 'integer',
            description: 'Идентификатор темы',
            format: 'int64'
        },
        content: {
            type: 'string',
            description: 'Содержимое сообщения'
        },
        created: {
            type: 'string',
            description: 'Дата и время создания сообщения',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            description: 'Идентификатор пользователя, создавшего сообщение',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    description: 'Сообщение'
} as const;

export const PostKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Post'
            }
        }
    },
    additionalProperties: false
} as const;

export const PostSortTypeSchema = {
    enum: [0],
    type: 'integer',
    format: 'int32'
} as const;

export const PostSortTypeSortCriteriaSchema = {
    required: ['field', 'order'],
    type: 'object',
    properties: {
        field: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostSortType'
                }
            ]
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortOrderType'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const SortOrderTypeSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const ThreadSchema = {
    required: ['categoryId', 'created', 'createdBy', 'postIdSeq', 'posts', 'threadId', 'title'],
    type: 'object',
    properties: {
        threadId: {
            type: 'integer',
            description: 'Идентификатор темы',
            format: 'int64'
        },
        postIdSeq: {
            type: 'integer',
            description: 'Последний использованный идентификтаор сообщения',
            format: 'int64'
        },
        categoryId: {
            type: 'integer',
            description: 'Идентификатор категории',
            format: 'int64'
        },
        title: {
            type: 'string',
            description: 'Название темы'
        },
        created: {
            type: 'string',
            description: 'Дата и время создания темы',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            description: 'Идентификатор пользователя, создавшего тему',
            format: 'uuid'
        },
        posts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Post'
            },
            description: 'Сообщения темы'
        }
    },
    additionalProperties: false,
    description: 'Тема'
} as const;

export const ThreadKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Thread'
            }
        }
    },
    additionalProperties: false
} as const;

export const UserSchema = {
    required: ['createdAt', 'email', 'enabled', 'userId', 'username'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            description: 'Идентификатор пользователя',
            format: 'uuid'
        },
        username: {
            type: 'string',
            description: 'Логин пользователя'
        },
        email: {
            type: 'string',
            description: 'Электронная почта пользователя'
        },
        enabled: {
            type: 'boolean',
            description: 'Активна ли учетная запись пользователя'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания учетной записи пользователя',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const UserKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    },
    additionalProperties: false
} as const;