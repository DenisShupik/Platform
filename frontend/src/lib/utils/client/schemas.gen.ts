// This file is auto-generated by @hey-api/openapi-ts

export const CategorySchema = {
    required: ['categoryId', 'created', 'createdBy', 'forumId', 'threads', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        forumId: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string'
        },
        created: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            format: 'uuid'
        },
        threads: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Thread'
            }
        }
    },
    additionalProperties: false
} as const;

export const CategoryStatsSchema = {
    required: ['categoryId', 'postCount', 'threadCount'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        threadCount: {
            type: 'integer',
            format: 'int64'
        },
        postCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const CreateCategoryRequestSchema = {
    required: ['forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateForumRequestSchema = {
    required: ['title'],
    type: 'object',
    properties: {
        title: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateThreadRequestSchema = {
    required: ['categoryId', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const FilterTypeSchema = {
    enum: ['CategoryLatest', 'ThreadLatest'],
    type: 'string'
} as const;

export const ForumSchema = {
    required: ['categories', 'created', 'createdBy', 'forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string'
        },
        created: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            format: 'uuid'
        },
        categories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Category'
            }
        }
    },
    additionalProperties: false
} as const;

export const ForumKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Forum'
            }
        }
    },
    additionalProperties: false
} as const;

export const FromBodySchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const GetThreadPostsCountResponseSchema = {
    required: ['count', 'threadId'],
    type: 'object',
    properties: {
        threadId: {
            type: 'integer',
            format: 'int64'
        },
        count: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PostSchema = {
    required: ['content', 'created', 'createdBy', 'postId', 'threadId'],
    type: 'object',
    properties: {
        postId: {
            type: 'integer',
            format: 'int64'
        },
        threadId: {
            type: 'integer',
            format: 'int64'
        },
        content: {
            type: 'string'
        },
        created: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const PostKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Post'
            }
        }
    },
    additionalProperties: false
} as const;

export const PostSortTypeSchema = {
    enum: [0],
    type: 'integer',
    format: 'int32'
} as const;

export const PostSortTypeSortCriteriaSchema = {
    required: ['field', 'order'],
    type: 'object',
    properties: {
        field: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostSortType'
                }
            ]
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortOrderType'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const SortOrderTypeSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const ThreadSchema = {
    required: ['categoryId', 'created', 'createdBy', 'postIdSeq', 'posts', 'threadId', 'title'],
    type: 'object',
    properties: {
        threadId: {
            type: 'integer',
            format: 'int64'
        },
        postIdSeq: {
            type: 'integer',
            format: 'int64'
        },
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string'
        },
        created: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            format: 'uuid'
        },
        posts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Post'
            }
        }
    },
    additionalProperties: false
} as const;

export const ThreadKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Thread'
            }
        }
    },
    additionalProperties: false
} as const;

export const UserSchema = {
    required: ['createdAt', 'email', 'enabled', 'userId', 'username'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        username: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const UserKeysetPageResponseSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    },
    additionalProperties: false
} as const;