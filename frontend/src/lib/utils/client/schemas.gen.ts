// This file is auto-generated by @hey-api/openapi-ts

export const CategoryDtoSchema = {
    required: ['categoryId', 'createdAt', 'createdBy', 'forumId', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryId'
                }
            ],
            description: 'Идентификатор раздела'
        },
        forumId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumId'
                }
            ],
            description: 'Идентификатор форума'
        },
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryTitle'
                }
            ],
            description: 'Название раздела'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания раздела',
            format: 'date-time'
        },
        createdBy: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ],
            description: 'Идентификатор пользователя, создавшего раздел'
        }
    },
    additionalProperties: false
} as const;

export const CategoryIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    additionalProperties: false,
    format: 'uuid'
} as const;

export const CategoryNotFoundErrorSchema = {
    required: ['$type', 'categoryId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        categoryId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CategoryTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string',
    additionalProperties: false
} as const;

export const CreateCategoryRequestBodySchema = {
    required: ['forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumId'
                }
            ],
            description: 'Идентификатор форума'
        },
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryTitle'
                }
            ],
            description: 'Название раздела'
        }
    },
    additionalProperties: false
} as const;

export const CreateForumRequestBodySchema = {
    required: ['title'],
    type: 'object',
    properties: {
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumTitle'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreatePostRequestBodySchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostContent'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateThreadRequestBodySchema = {
    required: ['categoryId', 'title'],
    type: 'object',
    properties: {
        categoryId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryId'
                }
            ],
            description: 'Идентификатор раздела'
        },
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadTitle'
                }
            ],
            description: 'Название темы'
        }
    },
    additionalProperties: false
} as const;

export const ForumDtoSchema = {
    required: ['createdAt', 'createdBy', 'forumId', 'title'],
    type: 'object',
    properties: {
        forumId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumId'
                }
            ],
            description: 'Идентификатор форума'
        },
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumTitle'
                }
            ],
            description: 'Название форума'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания форума',
            format: 'date-time'
        },
        createdBy: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ],
            description: 'Идентификатор пользователя, создавшего форум'
        }
    },
    additionalProperties: false
} as const;

export const ForumIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    additionalProperties: false,
    format: 'uuid'
} as const;

export const ForumNotFoundErrorSchema = {
    required: ['$type', 'forumId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        forumId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ForumId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const ForumTitleSchema = {
    maxLength: 64,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string',
    additionalProperties: false
} as const;

export const GetCategoryThreadsRequestSortTypeSchema = {
    enum: [0],
    type: 'integer',
    format: 'int32'
} as const;

export const GetCategoryThreadsRequestSortTypeSortCriteriaSchema = {
    required: ['field', 'order'],
    type: 'object',
    properties: {
        field: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GetCategoryThreadsRequestSortType'
                }
            ]
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortOrderType'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const NonPostAuthorErrorSchema = {
    required: ['$type', 'postId', 'threadId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ]
        },
        postId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const PostContentSchema = {
    maxLength: 1024,
    minLength: 2,
    pattern: '^(?!\\s*$).+',
    type: 'string',
    additionalProperties: false
} as const;

export const PostDtoSchema = {
    required: ['content', 'createdAt', 'createdBy', 'postId', 'rowVersion', 'threadId'],
    type: 'object',
    properties: {
        postId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostId'
                }
            ],
            description: 'Идентификатор сообщения'
        },
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ],
            description: 'Идентификатор темы'
        },
        content: {
            type: 'string',
            description: 'Содержимое сообщения'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания сообщения',
            format: 'date-time'
        },
        createdBy: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ],
            description: 'Идентификатор пользователя, создавшего сообщение'
        },
        rowVersion: {
            type: 'integer',
            description: 'Маркер версии записи',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const PostIdSchema = {
    minimum: 1,
    type: 'integer',
    additionalProperties: false,
    format: 'int64'
} as const;

export const PostNotFoundErrorSchema = {
    required: ['$type', 'postId', 'threadId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ]
        },
        postId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const PostStaleErrorSchema = {
    required: ['$type', 'postId', 'rowVersion', 'threadId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ]
        },
        postId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostId'
                }
            ]
        },
        rowVersion: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const SortOrderTypeSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const SortTypeSchema = {
    enum: [0],
    type: 'integer',
    format: 'int32'
} as const;

export const SortTypeSortCriteriaSchema = {
    required: ['field', 'order'],
    type: 'object',
    properties: {
        field: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortType'
                }
            ]
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortOrderType'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const ThreadDtoSchema = {
    required: ['categoryId', 'createdAt', 'createdBy', 'postIdSeq', 'threadId', 'title'],
    type: 'object',
    properties: {
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ],
            description: 'Идентификатор темы'
        },
        postIdSeq: {
            type: 'integer',
            description: 'Последний использованный идентификатор сообщения',
            format: 'int64'
        },
        categoryId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CategoryId'
                }
            ],
            description: 'Идентификатор раздела'
        },
        title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadTitle'
                }
            ],
            description: 'Название темы'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания темы',
            format: 'date-time'
        },
        createdBy: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ],
            description: 'Идентификатор пользователя, создавшего тему'
        }
    },
    additionalProperties: false
} as const;

export const ThreadIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    additionalProperties: false,
    format: 'uuid'
} as const;

export const ThreadNotFoundErrorSchema = {
    required: ['$type', 'threadId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        threadId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ThreadId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const ThreadTitleSchema = {
    maxLength: 128,
    minLength: 3,
    pattern: '^(?!\\s*$).+',
    type: 'string',
    additionalProperties: false
} as const;

export const UpdatePostRequestBodySchema = {
    required: ['content', 'rowVersion'],
    type: 'object',
    properties: {
        content: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PostContent'
                }
            ],
            description: 'Содержимое сообщения'
        },
        rowVersion: {
            type: 'integer',
            description: 'Маркер версии записи',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const UserDtoSchema = {
    required: ['createdAt', 'email', 'enabled', 'userId', 'username'],
    type: 'object',
    properties: {
        userId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ],
            description: 'Идентификатор пользователя'
        },
        username: {
            type: 'string',
            description: 'Логин пользователя'
        },
        email: {
            type: 'string',
            description: 'Электронная почта пользователя'
        },
        enabled: {
            type: 'boolean',
            description: 'Активна ли учетная запись пользователя'
        },
        createdAt: {
            type: 'string',
            description: 'Дата и время создания учетной записи пользователя',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const UserIdSchema = {
    pattern: '^(?!00000000-0000-0000-0000-000000000000$)',
    type: 'string',
    additionalProperties: false,
    format: 'uuid'
} as const;

export const UserNotFoundErrorSchema = {
    required: ['$type', 'userId'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string',
            readOnly: true
        },
        userId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                }
            ]
        }
    },
    additionalProperties: false
} as const;