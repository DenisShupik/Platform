// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const vUserId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vActivityDto = v.object({
    '$type': v.string(),
    occurredBy: vUserId,
    occurredAt: v.pipe(v.string(), v.isoTimestamp())
});

/**
 *
 *
 * 0 = PostAdded
 */
export const vActivityType = v.unknown();

export const vCategoryId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vForumId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vCategoryTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(128), v.regex(/^(?!\s*$).+/));

export const vCategoryDto = v.object({
    categoryId: vCategoryId,
    forumId: vForumId,
    title: vCategoryTitle,
    createdBy: vUserId,
    createdAt: v.pipe(v.string(), v.isoTimestamp())
});

export const vCategoryNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    categoryId: vCategoryId
});

/**
 * Типы каналов доставки уведомлений
 *
 * 0 = Internal (Внутренний канал)
 *
 * 1 = Email (Электронная почта)
 */
export const vChannelType = v.unknown();

export const vCreateCategoryRequestBody = v.object({
    forumId: vForumId,
    title: vCategoryTitle
});

export const vForumTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(64), v.regex(/^(?!\s*$).+/));

export const vCreateForumRequestBody = v.object({
    title: vForumTitle
});

export const vPostContent = v.pipe(v.string(), v.minLength(2), v.maxLength(1024), v.regex(/^(?!\s*$).+/));

export const vCreatePostRequestBody = v.object({
    content: vPostContent
});

export const vThreadTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(128), v.regex(/^(?!\s*$).+/));

export const vCreateThreadRequestBody = v.object({
    categoryId: vCategoryId,
    title: vThreadTitle
});

export const vCreateThreadSubscriptionRequestBody = v.object({
    channels: v.array(vChannelType)
});

export const vThreadId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vDuplicateThreadSubscriptionError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    threadId: vThreadId
});

export const vForumDto = v.object({
    forumId: vForumId,
    title: vForumTitle,
    createdBy: vUserId,
    createdAt: v.pipe(v.string(), v.isoTimestamp())
});

export const vForumNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    forumId: vForumId
});

/**
 *
 *
 * 0 = Forum
 *
 * 1 = Category
 *
 * 2 = Thread
 */
export const vGetActivitiesPagedQueryGroupByType = v.unknown();

/**
 *
 *
 * 0 = Latest
 */
export const vGetActivitiesPagedQueryModeType = v.unknown();

/**
 *
 *
 * latest (Sort by Latest ascending)
 *
 * -latest (Sort by Latest descending)
 */
export const vGetActivitiesPagedQuerySortEnum = v.picklist([
    'latest',
    '-latest'
]);

/**
 *
 *
 * categoryid (Sort by CategoryId ascending)
 *
 * forumid (Sort by ForumId ascending)
 *
 * -categoryid (Sort by CategoryId descending)
 *
 * -forumid (Sort by ForumId descending)
 */
export const vGetCategoriesPagedQuerySortEnum = v.picklist([
    'categoryid',
    'forumid',
    '-categoryid',
    '-forumid'
]);

/**
 *
 *
 * activity (Sort by Activity ascending)
 *
 * -activity (Sort by Activity descending)
 */
export const vGetCategoryThreadsQuerySortEnum = v.picklist([
    'activity',
    '-activity'
]);

/**
 *
 *
 * forumid (Sort by ForumId ascending)
 *
 * -forumid (Sort by ForumId descending)
 */
export const vGetForumsPagedQuerySortEnum = v.picklist([
    'forumid',
    '-forumid'
]);

/**
 *
 *
 * occurredat (Sort by OccurredAt ascending)
 *
 * deliveredat (Sort by DeliveredAt ascending)
 *
 * -occurredat (Sort by OccurredAt descending)
 *
 * -deliveredat (Sort by DeliveredAt descending)
 */
export const vGetInternalNotificationQuerySortEnum = v.picklist([
    'occurredat',
    'deliveredat',
    '-occurredat',
    '-deliveredat'
]);

/**
 *
 *
 * 0 = OccurredAt
 *
 * 1 = DeliveredAt
 */
export const vGetInternalNotificationQuerySortType = v.unknown();

/**
 *
 *
 * index (Sort by Index ascending)
 *
 * -index (Sort by Index descending)
 */
export const vGetThreadPostsPagedQuerySortEnum = v.picklist([
    'index',
    '-index'
]);

export const vGetThreadSubscriptionStatusQueryResult = v.object({
    isSubscribed: v.boolean()
});

/**
 *
 *
 * threadid (Sort by ThreadId ascending)
 *
 * -threadid (Sort by ThreadId descending)
 */
export const vGetThreadsPagedQuerySortEnum = v.picklist([
    'threadid',
    '-threadid'
]);

/**
 *
 *
 * userid (Sort by UserId ascending)
 *
 * -userid (Sort by UserId descending)
 */
export const vGetUsersPagedQuerySortEnum = v.picklist([
    'userid',
    '-userid'
]);

export const vNotifiableEventPayload = v.object({
    '$type': v.string()
});

export const vPostId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vPostAddedNotifiableEventPayload = v.intersect([
    vNotifiableEventPayload,
    v.object({
        '$type': v.literal('PostAdded')
    }),
    v.object({
        threadId: vThreadId,
        postId: vPostId,
        createdBy: vUserId
    })
]);

export const vPostUpdatedNotifiableEventPayload = v.intersect([
    vNotifiableEventPayload,
    v.object({
        '$type': v.literal('PostUpdated')
    }),
    v.object({
        threadId: vThreadId,
        postId: vPostId,
        updatedBy: vUserId
    })
]);

export const vNotifiableEventId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vInternalNotificationDto = v.object({
    payload: v.union([
        vPostAddedNotifiableEventPayload,
        vPostUpdatedNotifiableEventPayload
    ]),
    occurredAt: v.pipe(v.string(), v.isoTimestamp()),
    notifiableEventId: vNotifiableEventId,
    deliveredAt: v.optional(v.union([
        v.pipe(v.string(), v.isoTimestamp()),
        v.null()
    ]))
});

export const vInternalNotificationsPagedDto = v.object({
    notifications: v.array(vInternalNotificationDto),
    threads: v.object({}),
    users: v.object({}),
    totalCount: v.pipe(v.union([
        v.number(),
        v.string(),
        v.bigint()
    ]), v.transform(x => BigInt(x)), v.minValue(BigInt('-9223372036854775808'), 'Invalid value: Expected int64 to be >= -2^63'), v.maxValue(BigInt('9223372036854775807'), 'Invalid value: Expected int64 to be <= 2^63-1'))
});

export const vNonPostAuthorError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId,
    postId: vPostId
});

export const vNonThreadOwnerError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId
});

export const vNotOwnerError = v.object({
    '$type': v.pipe(v.string(), v.readonly())
});

/**
 * Типы уведомлений
 *
 * PostAdded
 *
 * PostUpdated
 */
export const vNotifiableEventPayloadType = v.picklist([
    'PostAdded',
    'PostUpdated'
]);

export const vNotificationNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    notifiableEventId: vNotifiableEventId,
    channel: vChannelType
});

export const vPaginationLimitMin10Max100Default100 = v.optional(v.pipe(v.number(), v.integer(), v.minValue(10), v.maxValue(100)), 100);

export const vPaginationOffset = v.optional(v.pipe(v.number(), v.integer(), v.minValue(0), v.maxValue(2147483647)), 0);

export const vPostAddedActivityDto = v.intersect([
    vActivityDto,
    v.object({
        '$type': v.literal('PostAddedActivityDto')
    }),
    v.object({
        forumId: vForumId,
        categoryId: vCategoryId,
        threadId: vThreadId,
        postId: vPostId
    })
]);

export const vPostDto = v.object({
    postId: vPostId,
    threadId: vThreadId,
    content: vPostContent,
    createdBy: vUserId,
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    updatedBy: vUserId,
    updatedAt: v.pipe(v.string(), v.isoTimestamp()),
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'))
});

export const vPostIndex = v.pipe(v.number(), v.integer(), v.minValue(0), v.maxValue(18446744073709552000));

export const vPostNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    postId: vPostId
});

export const vPostStaleError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId,
    postId: vPostId,
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'))
});

/**
 *
 *
 * 0 = Ascending
 *
 * 1 = Descending
 */
export const vSortOrderType = v.unknown();

/**
 * Состояние темы
 *
 * 0 = Draft (Тема еще подготавливается автором)
 *
 * 1 = Published (Тема опубликована и доступна пользователям)
 */
export const vThreadStatus = v.unknown();

export const vThreadDto = v.object({
    threadId: vThreadId,
    categoryId: vCategoryId,
    title: vThreadTitle,
    createdBy: vUserId,
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    status: vThreadStatus
});

export const vThreadNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId
});

export const vThreadSubscriptionNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    threadId: vThreadId
});

export const vUpdatePostRequestBody = v.object({
    content: vPostContent,
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'))
});

export const vUsername = v.pipe(v.string(), v.minLength(3), v.maxLength(64), v.regex(/^[a-z0-9]+(_[a-z0-9]+)*$/));

export const vUserDto = v.object({
    userId: vUserId,
    username: vUsername,
    email: v.string(),
    enabled: v.boolean(),
    createdAt: v.pipe(v.string(), v.isoTimestamp())
});

export const vUserNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId
});

export const vGetActivitiesPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        activity: vActivityType,
        groupBy: vGetActivitiesPagedQueryGroupByType,
        mode: vGetActivitiesPagedQueryModeType,
        sort: v.optional(v.array(vGetActivitiesPagedQuerySortEnum))
    })
});

/**
 * OK
 */
export const vGetActivitiesPagedResponse = v.array(vPostAddedActivityDto);

export const vGetCategoriesPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        forumIds: v.optional(v.pipe(v.array(vForumId), v.minLength(1))),
        title: v.optional(vCategoryTitle),
        sort: v.optional(v.array(vGetCategoriesPagedQuerySortEnum))
    }))
});

/**
 * OK
 */
export const vGetCategoriesPagedResponse = v.array(vCategoryDto);

export const vCreateCategoryData = v.object({
    body: vCreateCategoryRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateCategoryResponse = vCategoryId;

export const vGetCategoryData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryId: vCategoryId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoryResponse = vCategoryDto;

export const vGetCategoriesPostsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoriesPostsCountResponse = v.object({});

export const vGetCategoriesPostsLatestData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoriesPostsLatestResponse = v.object({});

export const vGetCategoriesThreadsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.object({
        includeDraft: v.optional(v.boolean())
    }))
});

/**
 * OK
 */
export const vGetCategoriesThreadsCountResponse = v.object({});

export const vGetCategoryThreadsData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryId: vCategoryId
    }),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(vGetCategoryThreadsQuerySortEnum),
        includeDraft: v.optional(v.boolean())
    }))
});

/**
 * OK
 */
export const vGetCategoryThreadsResponse = v.array(vThreadDto);

export const vGetForumsCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        createdBy: v.optional(vUserId)
    }))
});

/**
 * OK
 */
export const vGetForumsCountResponse = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('-9223372036854775808'), 'Invalid value: Expected int64 to be >= -2^63'), v.maxValue(BigInt('9223372036854775807'), 'Invalid value: Expected int64 to be <= 2^63-1'));

export const vGetForumsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(vGetForumsPagedQuerySortEnum),
        title: v.optional(vForumTitle),
        createdBy: v.optional(vUserId)
    }))
});

/**
 * OK
 */
export const vGetForumsPagedResponse = v.array(vForumDto);

export const vCreateForumData = v.object({
    body: vCreateForumRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateForumResponse = vForumId;

export const vGetForumData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        forumId: vForumId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetForumResponse = vForumDto;

export const vGetForumsCategoriesCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        forumIds: v.pipe(v.array(vForumId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetForumsCategoriesCountResponse = v.object({});

export const vGetPostIndexData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        postId: vPostId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetPostIndexResponse = vPostIndex;

export const vUpdatePostData = v.object({
    body: vUpdatePostRequestBody,
    path: v.object({
        postId: vPostId
    }),
    query: v.optional(v.never())
});

export const vGetThreadsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(v.array(vGetThreadsPagedQuerySortEnum)),
        createdBy: v.optional(vUserId),
        status: v.optional(vThreadStatus)
    }))
});

/**
 * OK
 */
export const vGetThreadsPagedResponse = v.array(vThreadDto);

export const vCreateThreadData = v.object({
    body: vCreateThreadRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateThreadResponse = vThreadId;

export const vGetThreadsCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        createdBy: v.optional(vUserId),
        status: v.optional(vThreadStatus)
    }))
});

/**
 * OK
 */
export const vGetThreadsCountResponse = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('-9223372036854775808'), 'Invalid value: Expected int64 to be >= -2^63'), v.maxValue(BigInt('9223372036854775807'), 'Invalid value: Expected int64 to be <= 2^63-1'));

export const vGetThreadData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadResponse = vThreadDto;

export const vGetThreadPostsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(v.array(vGetThreadPostsPagedQuerySortEnum))
    }))
});

/**
 * OK
 */
export const vGetThreadPostsPagedResponse = v.array(vPostDto);

export const vCreatePostData = v.object({
    body: vCreatePostRequestBody,
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreatePostResponse = vPostId;

export const vGetThreadsPostsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadIds: v.pipe(v.array(vThreadId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadsPostsCountResponse = v.object({});

export const vGetThreadsPostsLatestData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadIds: v.pipe(v.array(vThreadId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadsPostsLatestResponse = v.object({});

export const vDeleteAvatarData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vUploadAvatarData = v.object({
    body: v.optional(v.object({
        file: v.string()
    })),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vUploadAvatarResponse = v.void();

export const vGetInternalNotificationCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        isDelivered: v.optional(v.boolean())
    }))
});

/**
 * OK
 */
export const vGetInternalNotificationCountResponse = v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'));

export const vGetInternalNotificationsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(v.array(vGetInternalNotificationQuerySortEnum)),
        isDelivered: v.optional(v.boolean())
    }))
});

/**
 * OK
 */
export const vGetInternalNotificationsPagedResponse = vInternalNotificationsPagedDto;

export const vMarkInternalNotificationAsReadData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        notifiableEventId: vNotifiableEventId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vMarkInternalNotificationAsReadResponse = v.void();

export const vDeleteInternalNotificationData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        notifiableEventId: vNotifiableEventId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vDeleteInternalNotificationResponse = v.void();

export const vGetThreadSubscriptionStatusData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadSubscriptionStatusResponse = vGetThreadSubscriptionStatusQueryResult;

export const vDeleteThreadSubscriptionData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vDeleteThreadSubscriptionResponse = v.void();

export const vCreateThreadSubscriptionData = v.object({
    body: vCreateThreadSubscriptionRequestBody,
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vCreateThreadSubscriptionResponse = v.void();

export const vGetUsersPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100Default100),
        sort: v.optional(v.array(vGetUsersPagedQuerySortEnum))
    }))
});

/**
 * OK
 */
export const vGetUsersPagedResponse = v.array(vUserDto);

export const vGetUserByIdData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        userId: vUserId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetUserByIdResponse = vUserDto;

export const vGetUsersBulkData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        userIds: v.pipe(v.array(vUserId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetUsersBulkResponse = v.array(vUserDto);