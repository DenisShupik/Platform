// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const vUserId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vAccessPolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vForumId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vCategoryId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vThreadId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vPostId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vActivityDtoPostAddedActivityDto = v.object({
    '$type': v.picklist([
        'PostAdded'
    ]),
    forumId: vForumId,
    categoryId: vCategoryId,
    threadId: vThreadId,
    postId: vPostId,
    occurredBy: v.optional(v.union([
        v.null(),
        vUserId
    ])),
    occurredAt: v.pipe(v.string(), v.isoTimestamp())
});

export const vActivityDto = v.intersect([
    v.object({
        '$type': v.optional(v.literal('PostAdded'))
    }),
    vActivityDtoPostAddedActivityDto
]);

export const vActivityType = v.unknown();

export const vCategoryCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vCategoryTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(128), v.regex(/^(?!\s*$).+/));

export const vPolicyId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vCategoryDto = v.object({
    categoryId: vCategoryId,
    forumId: vForumId,
    title: vCategoryTitle,
    createdBy: v.optional(v.union([
        v.null(),
        vUserId
    ])),
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    accessPolicyId: vPolicyId,
    threadCreatePolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vCategoryNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    categoryId: vCategoryId
});

export const vCreateCategoryRequestBody = v.object({
    forumId: vForumId,
    title: vCategoryTitle,
    accessPolicyId: vPolicyId,
    threadCreatePolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vForumTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(64), v.regex(/^(?!\s*$).+/));

export const vCreateForumRequestBody = v.object({
    title: vForumTitle,
    accessPolicyId: vPolicyId,
    categoryCreatePolicyId: vPolicyId,
    threadCreatePolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vPolicyType = v.unknown();

export const vPolicyValue = v.unknown();

export const vCreatePolicyRequestBody = v.object({
    type: vPolicyType,
    value: vPolicyValue
});

export const vPostContent = v.pipe(v.string(), v.minLength(2), v.maxLength(1024), v.regex(/^(?!\s*$).+/));

export const vCreatePostRequestBody = v.object({
    content: vPostContent
});

export const vThreadTitle = v.pipe(v.string(), v.minLength(3), v.maxLength(128), v.regex(/^(?!\s*$).+/));

export const vCreateThreadRequestBody = v.object({
    categoryId: vCategoryId,
    title: vThreadTitle,
    accessPolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vForumDto = v.object({
    forumId: vForumId,
    title: vForumTitle,
    createdBy: vUserId,
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    accessPolicyId: vPolicyId,
    categoryCreatePolicyId: vPolicyId,
    threadCreatePolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vForumNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    forumId: vForumId
});

export const vGetActivitiesPagedQueryGroupByType = v.unknown();

export const vGetActivitiesPagedQueryModeType = v.unknown();

export const vGetActivitiesPagedQuerySortType = v.picklist([
    'latest',
    '-latest'
]);

export const vGetCategoriesPagedQuerySortType = v.picklist([
    'categoryid',
    'forumid',
    '-categoryid',
    '-forumid'
]);

export const vGetCategoryThreadsPagedQuerySortType = v.picklist([
    'activity',
    '-activity'
]);

export const vGetForumsPagedQuerySortType = v.picklist([
    'forumid',
    '-forumid'
]);

export const vGetThreadPostsPagedQuerySortType = v.picklist([
    'index',
    '-index'
]);

export const vGetThreadsPagedQuerySortType = v.picklist([
    'threadid',
    '-threadid'
]);

export const vNonPostAuthorError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId,
    postId: vPostId
});

export const vNonThreadOwnerError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId
});

export const vNotAdminError = v.object({
    '$type': v.pipe(v.string(), v.readonly())
});

export const vNotOwnerError = v.object({
    '$type': v.pipe(v.string(), v.readonly())
});

export const vPaginationLimitMin10Max100 = v.pipe(v.number(), v.integer(), v.minValue(10), v.maxValue(100));

export const vPaginationOffset = v.optional(v.pipe(v.number(), v.integer(), v.minValue(0), v.maxValue(2147483647)), 0);

export const vPolicyRestrictedErrorAccessPolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorCategoryCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorThreadCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorPostCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedError = v.union([
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PolicyRestrictedErrorAccessPolicyRestrictedError'))
        }),
        vPolicyRestrictedErrorAccessPolicyRestrictedError
    ]),
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PolicyRestrictedErrorCategoryCreatePolicyRestrictedError'))
        }),
        vPolicyRestrictedErrorCategoryCreatePolicyRestrictedError
    ]),
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PolicyRestrictedErrorThreadCreatePolicyRestrictedError'))
        }),
        vPolicyRestrictedErrorThreadCreatePolicyRestrictedError
    ]),
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PolicyRestrictedErrorPostCreatePolicyRestrictedError'))
        }),
        vPolicyRestrictedErrorPostCreatePolicyRestrictedError
    ])
]);

export const vPolicyViolationError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    policyId: vPolicyId,
    userId: vUserId
});

export const vPostCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.unknown()
});

export const vPostDto = v.object({
    postId: vPostId,
    threadId: vThreadId,
    content: vPostContent,
    createdBy: v.optional(v.union([
        v.null(),
        vUserId
    ])),
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    updatedBy: v.optional(v.union([
        v.null(),
        vUserId
    ])),
    updatedAt: v.pipe(v.string(), v.isoTimestamp()),
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint32 to be >= 0'), v.maxValue(4294967295, 'Invalid value: Expected uint32 to be <= 2^32-1'))
});

export const vPostIndex = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('0'), 'Invalid value: Expected uint64 to be >= 0'), v.maxValue(BigInt('18446744073709551615'), 'Invalid value: Expected uint64 to be <= 2^64-1'));

export const vPostNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    postId: vPostId
});

export const vPostStaleError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId,
    postId: vPostId,
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint32 to be >= 0'), v.maxValue(4294967295, 'Invalid value: Expected uint32 to be <= 2^32-1'))
});

export const vThreadCreatePolicyRestrictedError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vThreadStatus = v.unknown();

export const vThreadDto = v.object({
    threadId: vThreadId,
    categoryId: vCategoryId,
    title: vThreadTitle,
    createdBy: v.optional(v.union([
        v.null(),
        vUserId
    ])),
    createdAt: v.pipe(v.string(), v.isoTimestamp()),
    status: vThreadStatus,
    accessPolicyId: vPolicyId,
    postCreatePolicyId: vPolicyId
});

export const vThreadNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    threadId: vThreadId
});

export const vUpdatePostRequestBody = v.object({
    content: vPostContent,
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint32 to be >= 0'), v.maxValue(4294967295, 'Invalid value: Expected uint32 to be <= 2^32-1'))
});

export const vIFormFile = v.string();

export const vChannelType = v.unknown();

export const vCreateThreadSubscriptionRequestBody = v.object({
    channels: v.pipe(v.array(vChannelType), v.minLength(1))
});

export const vDuplicateThreadSubscriptionError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    threadId: vThreadId
});

export const vGetInternalNotificationsPagedQuerySortType = v.picklist([
    'occurredat',
    'deliveredat',
    '-occurredat',
    '-deliveredat'
]);

export const vGetThreadSubscriptionStatusQueryResult = v.object({
    isSubscribed: v.boolean()
});

export const vNotifiableEventPayloadPostAddedNotifiableEventPayload = v.object({
    '$type': v.picklist([
        'PostAdded'
    ]),
    threadId: vThreadId,
    postId: vPostId,
    createdBy: v.union([
        v.null(),
        vUserId
    ])
});

export const vNotifiableEventPayloadPostUpdatedNotifiableEventPayload = v.object({
    '$type': v.picklist([
        'PostUpdated'
    ]),
    threadId: vThreadId,
    postId: vPostId,
    updatedBy: v.union([
        v.null(),
        vUserId
    ])
});

export const vNotifiableEventPayload = v.union([
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PostAdded'))
        }),
        vNotifiableEventPayloadPostAddedNotifiableEventPayload
    ]),
    v.intersect([
        v.object({
            '$type': v.optional(v.literal('PostUpdated'))
        }),
        vNotifiableEventPayloadPostUpdatedNotifiableEventPayload
    ])
]);

export const vNotifiableEventId = v.pipe(v.string(), v.uuid(), v.regex(/^(?!00000000-0000-0000-0000-000000000000$)/));

export const vInternalNotificationDto = v.object({
    payload: vNotifiableEventPayload,
    occurredAt: v.pipe(v.string(), v.isoTimestamp()),
    notifiableEventId: vNotifiableEventId,
    deliveredAt: v.optional(v.union([
        v.null(),
        v.pipe(v.string(), v.isoTimestamp())
    ]))
});

export const vInternalNotificationsPagedDto = v.object({
    notifications: v.array(vInternalNotificationDto),
    threads: v.object({}),
    users: v.object({}),
    totalCount: v.pipe(v.union([
        v.number(),
        v.string(),
        v.bigint()
    ]), v.transform(x => BigInt(x)), v.minValue(BigInt('0'), 'Invalid value: Expected uint64 to be >= 0'), v.maxValue(BigInt('18446744073709551615'), 'Invalid value: Expected uint64 to be <= 2^64-1'))
});

export const vNotificationNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    notifiableEventId: vNotifiableEventId,
    channel: vChannelType
});

export const vThreadSubscriptionNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId,
    threadId: vThreadId
});

export const vUsername = v.pipe(v.string(), v.minLength(3), v.maxLength(64), v.regex(/^[a-z0-9]+(_[a-z0-9]+)*$/));

export const vGetUsersPagedQuerySortType = v.picklist([
    'userid',
    '-userid'
]);

export const vUserDto = v.object({
    userId: vUserId,
    username: vUsername,
    email: v.string(),
    enabled: v.boolean(),
    createdAt: v.pipe(v.string(), v.isoTimestamp())
});

export const vUserNotFoundError = v.object({
    '$type': v.pipe(v.string(), v.readonly()),
    userId: vUserId
});

export const vAccessPolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vCategoryCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vCategoryNotFoundErrorWritable = v.object({
    categoryId: vCategoryId
});

export const vForumNotFoundErrorWritable = v.object({
    forumId: vForumId
});

export const vNonPostAuthorErrorWritable = v.object({
    threadId: vThreadId,
    postId: vPostId
});

export const vNonThreadOwnerErrorWritable = v.object({
    threadId: vThreadId
});

export const vPolicyRestrictedErrorAccessPolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorCategoryCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorPostCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyRestrictedErrorThreadCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vPolicyViolationErrorWritable = v.object({
    policyId: vPolicyId,
    userId: vUserId
});

export const vPostCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.unknown()
});

export const vPostNotFoundErrorWritable = v.object({
    postId: vPostId
});

export const vPostStaleErrorWritable = v.object({
    threadId: vThreadId,
    postId: vPostId,
    rowVersion: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint32 to be >= 0'), v.maxValue(4294967295, 'Invalid value: Expected uint32 to be <= 2^32-1'))
});

export const vThreadCreatePolicyRestrictedErrorWritable = v.object({
    userId: v.union([
        v.null(),
        vUserId
    ])
});

export const vThreadNotFoundErrorWritable = v.object({
    threadId: vThreadId
});

export const vDuplicateThreadSubscriptionErrorWritable = v.object({
    userId: vUserId,
    threadId: vThreadId
});

export const vNotificationNotFoundErrorWritable = v.object({
    userId: vUserId,
    notifiableEventId: vNotifiableEventId,
    channel: vChannelType
});

export const vThreadSubscriptionNotFoundErrorWritable = v.object({
    userId: vUserId,
    threadId: vThreadId
});

export const vUserNotFoundErrorWritable = v.object({
    userId: vUserId
});

export const vGetActivitiesPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        activity: vActivityType,
        groupBy: vGetActivitiesPagedQueryGroupByType,
        mode: vGetActivitiesPagedQueryModeType,
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(v.pipe(v.array(vGetActivitiesPagedQuerySortType), v.minLength(1)), ['latest'])
    })
});

/**
 * OK
 */
export const vGetActivitiesPagedResponse = v.array(vActivityDto);

export const vGetCategoriesPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        forumIds: v.optional(v.pipe(v.array(vForumId), v.minLength(1))),
        title: v.optional(vCategoryTitle),
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(v.pipe(v.array(vGetCategoriesPagedQuerySortType), v.minLength(1)), ['categoryid'])
    }))
});

/**
 * OK
 */
export const vGetCategoriesPagedResponse = v.array(vCategoryDto);

export const vCreateCategoryData = v.object({
    body: vCreateCategoryRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateCategoryResponse = vCategoryId;

export const vGetCategoryData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryId: vCategoryId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoryResponse = vCategoryDto;

export const vGetCategoriesPostsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoriesPostsCountResponse = v.object({});

export const vGetCategoriesPostsLatestData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetCategoriesPostsLatestResponse = v.object({});

export const vGetCategoriesThreadsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryIds: v.pipe(v.array(vCategoryId), v.minLength(1))
    }),
    query: v.optional(v.object({
        includeDraft: v.optional(v.boolean(), false)
    }))
});

/**
 * OK
 */
export const vGetCategoriesThreadsCountResponse = v.object({});

export const vGetCategoryThreadsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        categoryId: vCategoryId
    }),
    query: v.optional(v.object({
        includeDraft: v.optional(v.boolean(), false),
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(vGetCategoryThreadsPagedQuerySortType)
    }))
});

/**
 * OK
 */
export const vGetCategoryThreadsPagedResponse = v.array(vThreadDto);

export const vGetForumsCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        createdBy: v.optional(vUserId)
    }))
});

/**
 * OK
 */
export const vGetForumsCountResponse = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('0'), 'Invalid value: Expected uint64 to be >= 0'), v.maxValue(BigInt('18446744073709551615'), 'Invalid value: Expected uint64 to be <= 2^64-1'));

export const vGetForumsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        title: v.optional(vForumTitle),
        createdBy: v.optional(vUserId),
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(vGetForumsPagedQuerySortType)
    }))
});

/**
 * OK
 */
export const vGetForumsPagedResponse = v.array(vForumDto);

export const vCreateForumData = v.object({
    body: vCreateForumRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateForumResponse = vForumId;

export const vGetForumData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        forumId: vForumId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetForumResponse = vForumDto;

export const vGetForumsCategoriesCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        forumIds: v.pipe(v.array(vForumId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetForumsCategoriesCountResponse = v.object({});

export const vGetPostIndexData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        postId: vPostId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetPostIndexResponse = vPostIndex;

export const vUpdatePostData = v.object({
    body: vUpdatePostRequestBody,
    path: v.object({
        postId: vPostId
    }),
    query: v.optional(v.never())
});

export const vGetThreadsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        createdBy: v.optional(vUserId),
        status: v.optional(vThreadStatus),
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(vGetThreadsPagedQuerySortType)
    }))
});

/**
 * OK
 */
export const vGetThreadsPagedResponse = v.array(vThreadDto);

export const vCreateThreadData = v.object({
    body: vCreateThreadRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateThreadResponse = vThreadId;

export const vGetThreadsCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        createdBy: v.optional(vUserId),
        status: v.optional(vThreadStatus)
    }))
});

/**
 * OK
 */
export const vGetThreadsCountResponse = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('0'), 'Invalid value: Expected uint64 to be >= 0'), v.maxValue(BigInt('18446744073709551615'), 'Invalid value: Expected uint64 to be <= 2^64-1'));

export const vGetThreadData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadResponse = vThreadDto;

export const vGetThreadPostsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(vGetThreadPostsPagedQuerySortType)
    }))
});

/**
 * OK
 */
export const vGetThreadPostsPagedResponse = v.array(vPostDto);

export const vCreatePostData = v.object({
    body: vCreatePostRequestBody,
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreatePostResponse = vPostId;

export const vGetThreadsPostsCountData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadIds: v.pipe(v.array(vThreadId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadsPostsCountResponse = v.object({});

export const vGetThreadsPostsLatestData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadIds: v.pipe(v.array(vThreadId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadsPostsLatestResponse = v.object({});

export const vCreateForumPolicySetData = v.object({
    body: vCreatePolicyRequestBody,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vCreateForumPolicySetResponse = vPolicyId;

export const vDeleteAvatarData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vUploadAvatarData = v.object({
    body: v.object({
        file: vIFormFile
    }),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vUploadAvatarResponse = v.void();

export const vGetThreadSubscriptionStatusData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetThreadSubscriptionStatusResponse = vGetThreadSubscriptionStatusQueryResult;

export const vDeleteThreadSubscriptionData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vDeleteThreadSubscriptionResponse = v.void();

export const vCreateThreadSubscriptionData = v.object({
    body: vCreateThreadSubscriptionRequestBody,
    path: v.object({
        threadId: vThreadId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vCreateThreadSubscriptionResponse = v.void();

export const vGetInternalNotificationCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        isDelivered: v.optional(v.boolean())
    }))
});

/**
 * OK
 */
export const vGetInternalNotificationCountResponse = v.pipe(v.union([
    v.number(),
    v.string(),
    v.bigint()
]), v.transform(x => BigInt(x)), v.minValue(BigInt('0'), 'Invalid value: Expected uint64 to be >= 0'), v.maxValue(BigInt('18446744073709551615'), 'Invalid value: Expected uint64 to be <= 2^64-1'));

export const vGetInternalNotificationsPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        isDelivered: v.optional(v.boolean()),
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(v.pipe(v.array(vGetInternalNotificationsPagedQuerySortType), v.minLength(1)), ['occurredat'])
    }))
});

/**
 * OK
 */
export const vGetInternalNotificationsPagedResponse = vInternalNotificationsPagedDto;

export const vMarkInternalNotificationAsReadData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        notifiableEventId: vNotifiableEventId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vMarkInternalNotificationAsReadResponse = v.void();

export const vDeleteInternalNotificationData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        notifiableEventId: vNotifiableEventId
    }),
    query: v.optional(v.never())
});

/**
 * No Content
 */
export const vDeleteInternalNotificationResponse = v.void();

export const vGetUsersPagedData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        offset: v.optional(vPaginationOffset),
        limit: v.optional(vPaginationLimitMin10Max100),
        sort: v.optional(vGetUsersPagedQuerySortType)
    }))
});

/**
 * OK
 */
export const vGetUsersPagedResponse = v.array(vUserDto);

export const vGetUserData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        userId: vUserId
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetUserResponse = vUserDto;

export const vGetUsersBulkData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        userIds: v.pipe(v.array(vUserId), v.minLength(1))
    }),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vGetUsersBulkResponse = v.array(vUserDto);
