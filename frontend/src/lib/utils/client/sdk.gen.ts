// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import { getActivitiesPagedResponseTransformer, getCategoriesPagedResponseTransformer, getCategoryResponseTransformer, getCategoryThreadsPagedResponseTransformer, getForumResponseTransformer, getForumsPagedResponseTransformer, getInternalNotificationsPagedResponseTransformer, getThreadPostsPagedResponseTransformer, getThreadResponseTransformer, getThreadsPagedResponseTransformer, getUserResponseTransformer, getUsersBulkResponseTransformer, getUsersPagedResponseTransformer } from './transformers.gen';
import type { CreateCategoryData, CreateCategoryErrors, CreateCategoryResponses, CreateForumData, CreateForumErrors, CreateForumPolicySetData, CreateForumPolicySetErrors, CreateForumPolicySetResponses, CreateForumResponses, CreatePostData, CreatePostErrors, CreatePostResponses, CreateThreadData, CreateThreadErrors, CreateThreadResponses, CreateThreadSubscriptionData, CreateThreadSubscriptionErrors, CreateThreadSubscriptionResponses, DeleteAvatarData, DeleteAvatarErrors, DeleteAvatarResponses, DeleteInternalNotificationData, DeleteInternalNotificationErrors, DeleteInternalNotificationResponses, DeleteThreadSubscriptionData, DeleteThreadSubscriptionErrors, DeleteThreadSubscriptionResponses, GetActivitiesPagedData, GetActivitiesPagedResponses, GetCategoriesPagedData, GetCategoriesPagedErrors, GetCategoriesPagedResponses, GetCategoriesPostsCountData, GetCategoriesPostsCountErrors, GetCategoriesPostsCountResponses, GetCategoriesPostsLatestData, GetCategoriesPostsLatestErrors, GetCategoriesPostsLatestResponses, GetCategoriesThreadsCountData, GetCategoriesThreadsCountErrors, GetCategoriesThreadsCountResponses, GetCategoryData, GetCategoryErrors, GetCategoryResponses, GetCategoryThreadsPagedData, GetCategoryThreadsPagedErrors, GetCategoryThreadsPagedResponses, GetForumData, GetForumErrors, GetForumResponses, GetForumsCategoriesCountData, GetForumsCategoriesCountResponses, GetForumsCountData, GetForumsCountResponses, GetForumsPagedData, GetForumsPagedResponses, GetInternalNotificationCountData, GetInternalNotificationCountErrors, GetInternalNotificationCountResponses, GetInternalNotificationsPagedData, GetInternalNotificationsPagedErrors, GetInternalNotificationsPagedResponses, GetPostIndexData, GetPostIndexErrors, GetPostIndexResponses, GetThreadData, GetThreadErrors, GetThreadPostsPagedData, GetThreadPostsPagedErrors, GetThreadPostsPagedResponses, GetThreadResponses, GetThreadsCountData, GetThreadsCountErrors, GetThreadsCountResponses, GetThreadsPagedData, GetThreadsPagedErrors, GetThreadsPagedResponses, GetThreadsPostsCountData, GetThreadsPostsCountResponses, GetThreadsPostsLatestData, GetThreadsPostsLatestResponses, GetThreadSubscriptionStatusData, GetThreadSubscriptionStatusErrors, GetThreadSubscriptionStatusResponses, GetUserData, GetUserErrors, GetUserResponses, GetUsersBulkData, GetUsersBulkResponses, GetUsersPagedData, GetUsersPagedErrors, GetUsersPagedResponses, MarkInternalNotificationAsReadData, MarkInternalNotificationAsReadErrors, MarkInternalNotificationAsReadResponses, UpdatePostData, UpdatePostErrors, UpdatePostResponses, UploadAvatarData, UploadAvatarErrors, UploadAvatarResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getActivitiesPaged = <ThrowOnError extends boolean = false>(options: Options<GetActivitiesPagedData, ThrowOnError>) => {
    return (options.client ?? client).get<GetActivitiesPagedResponses, unknown, ThrowOnError>({
        responseTransformer: getActivitiesPagedResponseTransformer,
        url: '/api/activities',
        ...options
    });
};

export const getCategoriesPaged = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesPagedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoriesPagedResponses, GetCategoriesPagedErrors, ThrowOnError>({
        responseTransformer: getCategoriesPagedResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories',
        ...options
    });
};

export const createCategory = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCategoryResponses, CreateCategoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getCategory = <ThrowOnError extends boolean = false>(options: Options<GetCategoryData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoryResponses, GetCategoryErrors, ThrowOnError>({
        responseTransformer: getCategoryResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{categoryId}',
        ...options
    });
};

export const getCategoriesPostsCount = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesPostsCountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoriesPostsCountResponses, GetCategoriesPostsCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{categoryIds}/posts/count',
        ...options
    });
};

export const getCategoriesPostsLatest = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesPostsLatestData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoriesPostsLatestResponses, GetCategoriesPostsLatestErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{categoryIds}/posts/latest',
        ...options
    });
};

export const getCategoriesThreadsCount = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesThreadsCountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoriesThreadsCountResponses, GetCategoriesThreadsCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{categoryIds}/threads/count',
        ...options
    });
};

export const getCategoryThreadsPaged = <ThrowOnError extends boolean = false>(options: Options<GetCategoryThreadsPagedData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoryThreadsPagedResponses, GetCategoryThreadsPagedErrors, ThrowOnError>({
        responseTransformer: getCategoryThreadsPagedResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{categoryId}/threads',
        ...options
    });
};

export const getForumsCount = <ThrowOnError extends boolean = false>(options?: Options<GetForumsCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForumsCountResponses, unknown, ThrowOnError>({
        url: '/api/forums/count',
        ...options
    });
};

export const getForumsPaged = <ThrowOnError extends boolean = false>(options?: Options<GetForumsPagedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForumsPagedResponses, unknown, ThrowOnError>({
        responseTransformer: getForumsPagedResponseTransformer,
        url: '/api/forums',
        ...options
    });
};

export const createForum = <ThrowOnError extends boolean = false>(options: Options<CreateForumData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateForumResponses, CreateForumErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forums',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getForum = <ThrowOnError extends boolean = false>(options: Options<GetForumData, ThrowOnError>) => {
    return (options.client ?? client).get<GetForumResponses, GetForumErrors, ThrowOnError>({
        responseTransformer: getForumResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forums/{forumId}',
        ...options
    });
};

export const getForumsCategoriesCount = <ThrowOnError extends boolean = false>(options: Options<GetForumsCategoriesCountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetForumsCategoriesCountResponses, unknown, ThrowOnError>({
        url: '/api/forums/{forumIds}/categories/count',
        ...options
    });
};

export const getPostIndex = <ThrowOnError extends boolean = false>(options: Options<GetPostIndexData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPostIndexResponses, GetPostIndexErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/posts/{postId}/order',
        ...options
    });
};

export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdatePostResponses, UpdatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/posts/{postId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getThreadsPaged = <ThrowOnError extends boolean = false>(options?: Options<GetThreadsPagedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadsPagedResponses, GetThreadsPagedErrors, ThrowOnError>({
        responseTransformer: getThreadsPagedResponseTransformer,
        url: '/api/threads',
        ...options
    });
};

export const createThread = <ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateThreadResponses, CreateThreadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getThreadsCount = <ThrowOnError extends boolean = false>(options?: Options<GetThreadsCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThreadsCountResponses, GetThreadsCountErrors, ThrowOnError>({
        url: '/api/threads/count',
        ...options
    });
};

export const getThread = <ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThreadResponses, GetThreadErrors, ThrowOnError>({
        responseTransformer: getThreadResponseTransformer,
        url: '/api/threads/{threadId}',
        ...options
    });
};

export const getThreadPostsPaged = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsPagedData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThreadPostsPagedResponses, GetThreadPostsPagedErrors, ThrowOnError>({
        responseTransformer: getThreadPostsPagedResponseTransformer,
        url: '/api/threads/{threadId}/posts',
        ...options
    });
};

export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePostResponses, CreatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads/{threadId}/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getThreadsPostsCount = <ThrowOnError extends boolean = false>(options: Options<GetThreadsPostsCountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThreadsPostsCountResponses, unknown, ThrowOnError>({
        url: '/api/threads/{threadIds}/posts/count',
        ...options
    });
};

export const getThreadsPostsLatest = <ThrowOnError extends boolean = false>(options: Options<GetThreadsPostsLatestData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThreadsPostsLatestResponses, unknown, ThrowOnError>({
        url: '/api/threads/{threadIds}/posts/latest',
        ...options
    });
};

export const createForumPolicySet = <ThrowOnError extends boolean = false>(options: Options<CreateForumPolicySetData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateForumPolicySetResponses, CreateForumPolicySetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum_policy_sets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAvatar = <ThrowOnError extends boolean = false>(options?: Options<DeleteAvatarData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAvatarResponses, DeleteAvatarErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/avatars',
        ...options
    });
};

export const uploadAvatar = <ThrowOnError extends boolean = false>(options: Options<UploadAvatarData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadAvatarResponses, UploadAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/avatars',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getThreadSubscriptionStatus = <ThrowOnError extends boolean = false>(options: Options<GetThreadSubscriptionStatusData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThreadSubscriptionStatusResponses, GetThreadSubscriptionStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/thread/{threadId}/subscriptions/status',
        ...options
    });
};

export const deleteThreadSubscription = <ThrowOnError extends boolean = false>(options: Options<DeleteThreadSubscriptionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteThreadSubscriptionResponses, DeleteThreadSubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/thread/{threadId}/subscriptions',
        ...options
    });
};

export const createThreadSubscription = <ThrowOnError extends boolean = false>(options: Options<CreateThreadSubscriptionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateThreadSubscriptionResponses, CreateThreadSubscriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/thread/{threadId}/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getInternalNotificationCount = <ThrowOnError extends boolean = false>(options?: Options<GetInternalNotificationCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInternalNotificationCountResponses, GetInternalNotificationCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me/notifications/count',
        ...options
    });
};

export const getInternalNotificationsPaged = <ThrowOnError extends boolean = false>(options?: Options<GetInternalNotificationsPagedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInternalNotificationsPagedResponses, GetInternalNotificationsPagedErrors, ThrowOnError>({
        responseTransformer: getInternalNotificationsPagedResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me/notifications',
        ...options
    });
};

export const markInternalNotificationAsRead = <ThrowOnError extends boolean = false>(options: Options<MarkInternalNotificationAsReadData, ThrowOnError>) => {
    return (options.client ?? client).put<MarkInternalNotificationAsReadResponses, MarkInternalNotificationAsReadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me/notifications/{notifiableEventId}/mark-read',
        ...options
    });
};

export const deleteInternalNotification = <ThrowOnError extends boolean = false>(options: Options<DeleteInternalNotificationData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInternalNotificationResponses, DeleteInternalNotificationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me/notifications/{notifiableEventId}',
        ...options
    });
};

export const getUsersPaged = <ThrowOnError extends boolean = false>(options?: Options<GetUsersPagedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersPagedResponses, GetUsersPagedErrors, ThrowOnError>({
        responseTransformer: getUsersPagedResponseTransformer,
        url: '/api/users',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        responseTransformer: getUserResponseTransformer,
        url: '/api/users/{userId}',
        ...options
    });
};

export const getUsersBulk = <ThrowOnError extends boolean = false>(options: Options<GetUsersBulkData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUsersBulkResponses, unknown, ThrowOnError>({
        responseTransformer: getUsersBulkResponseTransformer,
        url: '/api/users/batch/{userIds}',
        ...options
    });
};
