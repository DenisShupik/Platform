// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetCategoryPostsCountData, GetCategoryPostsCountResponse, GetCategoryPostsData, GetCategoryPostsResponse2, GetCategoryData, GetCategoryResponse, GetCategoryThreadsCountData, GetCategoryThreadsCountResponse, GetCategoryThreadsData, GetCategoryThreadsResponse, CreateCategoryData, CreateCategoryResponse, GetForumsCountData, GetForumsCountResponse, GetForumsData, GetForumsResponse, CreateForumData, CreateForumResponse, GetForumData, GetForumResponse, GetForumCategoriesCountData, GetForumCategoriesCountResponse, GetForumCategoriesData, GetForumCategoriesResponse, GetForumsCategoriesLatestByPostData, GetForumsCategoriesLatestByPostResponse, GetPostsData, GetPostsResponse, GetThreadData, GetThreadResponse, GetThreadPostsCountData, GetThreadPostsCountResponse, GetThreadPostsLatestData, GetThreadPostsLatestResponse, GetThreadPostsData, GetThreadPostsResponse, CreatePostData, CreatePostResponse, CreateThreadData, CreateThreadResponse, DeleteAvatarData, UploadAvatarData, UploadAvatarError, GetUsersData, GetUsersResponse, GetUsersError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError, GetUsersByIdsData, GetUsersByIdsResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getCategoryPostsCount = <ThrowOnError extends boolean = false>(options: Options<GetCategoryPostsCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryPostsCountResponse, unknown, ThrowOnError>({
        url: '/api/categories/{categoryIds}/posts/count',
        ...options
    });
};

export const getCategoryPosts = <ThrowOnError extends boolean = false>(options: Options<GetCategoryPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryPostsResponse2, unknown, ThrowOnError>({
        url: '/api/categories/{categoryIds}/posts',
        ...options
    });
};

export const getCategory = <ThrowOnError extends boolean = false>(options: Options<GetCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryResponse, unknown, ThrowOnError>({
        url: '/api/categories/{categoryId}',
        ...options
    });
};

export const getCategoryThreadsCount = <ThrowOnError extends boolean = false>(options: Options<GetCategoryThreadsCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryThreadsCountResponse, unknown, ThrowOnError>({
        url: '/api/categories/{categoryIds}/threads/count',
        ...options
    });
};

export const getCategoryThreads = <ThrowOnError extends boolean = false>(options: Options<GetCategoryThreadsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryThreadsResponse, unknown, ThrowOnError>({
        url: '/api/categories/{categoryId}/threads',
        ...options
    });
};

export const createCategory = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getForumsCount = <ThrowOnError extends boolean = false>(options?: Options<GetForumsCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetForumsCountResponse, unknown, ThrowOnError>({
        url: '/api/forums/count',
        ...options
    });
};

export const getForums = <ThrowOnError extends boolean = false>(options?: Options<GetForumsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetForumsResponse, unknown, ThrowOnError>({
        url: '/api/forums',
        ...options
    });
};

export const createForum = <ThrowOnError extends boolean = false>(options: Options<CreateForumData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateForumResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forums',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getForum = <ThrowOnError extends boolean = false>(options: Options<GetForumData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumResponse, unknown, ThrowOnError>({
        url: '/api/forums/{forumId}',
        ...options
    });
};

export const getForumCategoriesCount = <ThrowOnError extends boolean = false>(options: Options<GetForumCategoriesCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumCategoriesCountResponse, unknown, ThrowOnError>({
        url: '/api/forums/{forumIds}/categories/count',
        ...options
    });
};

export const getForumCategories = <ThrowOnError extends boolean = false>(options: Options<GetForumCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumCategoriesResponse, unknown, ThrowOnError>({
        url: '/api/forums/{forumId}/categories',
        ...options
    });
};

export const getForumsCategoriesLatestByPost = <ThrowOnError extends boolean = false>(options: Options<GetForumsCategoriesLatestByPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumsCategoriesLatestByPostResponse, unknown, ThrowOnError>({
        url: '/api/forums/{forumIds}/categories/latest-by-post',
        ...options
    });
};

export const getPosts = <ThrowOnError extends boolean = false>(options?: Options<GetPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostsResponse, unknown, ThrowOnError>({
        url: '/api/posts',
        ...options
    });
};

export const getThread = <ThrowOnError extends boolean = false>(options: Options<GetThreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads/{threadId}',
        ...options
    });
};

export const getThreadPostsCount = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadPostsCountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads/{threadIds}/posts/count',
        ...options
    });
};

export const getThreadPostsLatest = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsLatestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadPostsLatestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads/{threadIds}/posts/latest',
        ...options
    });
};

export const getThreadPosts = <ThrowOnError extends boolean = false>(options: Options<GetThreadPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadPostsResponse, unknown, ThrowOnError>({
        url: '/api/threads/{threadId}/posts',
        ...options
    });
};

export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads/{threadId}/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createThread = <ThrowOnError extends boolean = false>(options: Options<CreateThreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateThreadResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/threads',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAvatar = <ThrowOnError extends boolean = false>(options?: Options<DeleteAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/avatars',
        ...options
    });
};

export const uploadAvatar = <ThrowOnError extends boolean = false>(options?: Options<UploadAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, UploadAvatarError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/avatars',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
        url: '/api/users/{userId}',
        ...options
    });
};

export const getUsersByIds = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdsResponse, unknown, ThrowOnError>({
        url: '/api/users/batch/{userIds}',
        ...options
    });
};