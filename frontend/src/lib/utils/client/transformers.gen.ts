// This file is auto-generated by @hey-api/openapi-ts

import type { GetCategoriesResponse, GetCategoryResponse, GetCategoryThreadsResponse, GetForumsCountResponse, GetForumsResponse, GetForumResponse, GetPostsResponse, GetThreadsPagedResponse, GetThreadsCountResponse, GetThreadResponse, GetPostOrderResponse, CreatePostResponse, GetInternalNotificationsPagedResponse, GetUsersResponse, GetUserByIdResponse, GetUsersBulkResponse } from './types.gen';

const categoryDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getCategoriesResponseTransformer = async (data: any): Promise<GetCategoriesResponse> => {
    data = data.map((item: any) => {
        return categoryDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getCategoryResponseTransformer = async (data: any): Promise<GetCategoryResponse> => {
    data = categoryDtoSchemaResponseTransformer(data);
    return data;
};

const postIdSchemaResponseTransformer = (data: any) => {
    data = BigInt(data.toString());
    return data;
};

const threadDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.nextPostId = postIdSchemaResponseTransformer(data.nextPostId);
    return data;
};

export const getCategoryThreadsResponseTransformer = async (data: any): Promise<GetCategoryThreadsResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getForumsCountResponseTransformer = async (data: any): Promise<GetForumsCountResponse> => {
    data = BigInt(data.toString());
    return data;
};

const forumDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getForumsResponseTransformer = async (data: any): Promise<GetForumsResponse> => {
    data = data.map((item: any) => {
        return forumDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getForumResponseTransformer = async (data: any): Promise<GetForumResponse> => {
    data = forumDtoSchemaResponseTransformer(data);
    return data;
};

const postDtoSchemaResponseTransformer = (data: any) => {
    data.postId = postIdSchemaResponseTransformer(data.postId);
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const getPostsResponseTransformer = async (data: any): Promise<GetPostsResponse> => {
    data = data.map((item: any) => {
        return postDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getThreadsPagedResponseTransformer = async (data: any): Promise<GetThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getThreadsCountResponseTransformer = async (data: any): Promise<GetThreadsCountResponse> => {
    data = BigInt(data.toString());
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = threadDtoSchemaResponseTransformer(data);
    return data;
};

export const getPostOrderResponseTransformer = async (data: any): Promise<GetPostOrderResponse> => {
    data = BigInt(data.toString());
    return data;
};

export const createPostResponseTransformer = async (data: any): Promise<CreatePostResponse> => {
    data = postIdSchemaResponseTransformer(data);
    return data;
};

const internalNotificationDtoSchemaResponseTransformer = (data: any) => {
    data.occurredAt = new Date(data.occurredAt);
    if (data.deliveredAt) {
        data.deliveredAt = new Date(data.deliveredAt);
    }
    return data;
};

const internalNotificationsPagedDtoSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return internalNotificationDtoSchemaResponseTransformer(item);
    });
    data.totalCount = BigInt(data.totalCount.toString());
    return data;
};

export const getInternalNotificationsPagedResponseTransformer = async (data: any): Promise<GetInternalNotificationsPagedResponse> => {
    data = internalNotificationsPagedDtoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersResponseTransformer = async (data: any): Promise<GetUsersResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUserByIdResponseTransformer = async (data: any): Promise<GetUserByIdResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersBulkResponseTransformer = async (data: any): Promise<GetUsersBulkResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};