// This file is auto-generated by @hey-api/openapi-ts

import type { GetActivitiesPagedResponse, GetCategoriesPagedResponse, GetCategoryResponse, GetCategoryThreadsResponse, GetForumsCountResponse, GetForumsPagedResponse, GetForumResponse, GetThreadsPagedResponse, GetThreadsCountResponse, GetThreadResponse, GetThreadPostsPagedResponse, GetInternalNotificationsPagedResponse, GetUsersPagedResponse, GetUserByIdResponse, GetUsersBulkResponse } from './types.gen';

const activityDtoSchemaResponseTransformer = (data: any) => {
    data.occurredAt = new Date(data.occurredAt);
    return data;
};

const postAddedActivityDtoSchemaResponseTransformer = (data: any) => {
    data = activityDtoSchemaResponseTransformer(data);
    return data;
};

export const getActivitiesPagedResponseTransformer = async (data: any): Promise<GetActivitiesPagedResponse> => {
    data = data.map((item: any) => {
        return postAddedActivityDtoSchemaResponseTransformer(item);
    });
    return data;
};

const categoryDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getCategoriesPagedResponseTransformer = async (data: any): Promise<GetCategoriesPagedResponse> => {
    data = data.map((item: any) => {
        return categoryDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getCategoryResponseTransformer = async (data: any): Promise<GetCategoryResponse> => {
    data = categoryDtoSchemaResponseTransformer(data);
    return data;
};

const threadDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getCategoryThreadsResponseTransformer = async (data: any): Promise<GetCategoryThreadsResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getForumsCountResponseTransformer = async (data: any): Promise<GetForumsCountResponse> => {
    data = BigInt(data.toString());
    return data;
};

const forumDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getForumsPagedResponseTransformer = async (data: any): Promise<GetForumsPagedResponse> => {
    data = data.map((item: any) => {
        return forumDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getForumResponseTransformer = async (data: any): Promise<GetForumResponse> => {
    data = forumDtoSchemaResponseTransformer(data);
    return data;
};

export const getThreadsPagedResponseTransformer = async (data: any): Promise<GetThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getThreadsCountResponseTransformer = async (data: any): Promise<GetThreadsCountResponse> => {
    data = BigInt(data.toString());
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = threadDtoSchemaResponseTransformer(data);
    return data;
};

const postDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const getThreadPostsPagedResponseTransformer = async (data: any): Promise<GetThreadPostsPagedResponse> => {
    data = data.map((item: any) => {
        return postDtoSchemaResponseTransformer(item);
    });
    return data;
};

const internalNotificationDtoSchemaResponseTransformer = (data: any) => {
    data.occurredAt = new Date(data.occurredAt);
    if (data.deliveredAt) {
        data.deliveredAt = new Date(data.deliveredAt);
    }
    return data;
};

const internalNotificationsPagedDtoSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return internalNotificationDtoSchemaResponseTransformer(item);
    });
    data.totalCount = BigInt(data.totalCount.toString());
    return data;
};

export const getInternalNotificationsPagedResponseTransformer = async (data: any): Promise<GetInternalNotificationsPagedResponse> => {
    data = internalNotificationsPagedDtoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersPagedResponseTransformer = async (data: any): Promise<GetUsersPagedResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUserByIdResponseTransformer = async (data: any): Promise<GetUserByIdResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersBulkResponseTransformer = async (data: any): Promise<GetUsersBulkResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};