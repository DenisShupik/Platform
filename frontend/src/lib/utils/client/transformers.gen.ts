// This file is auto-generated by @hey-api/openapi-ts

import type { CreateCategoryResponse, CreateForumResponse, CreatePostResponse, CreateThreadResponse, GetCategoriesPagedResponse, GetCategoryResponse, GetCategoryThreadsPagedResponse, GetForumResponse, GetForumsPagedResponse, GetInternalNotificationsPagedResponse, GetPortalResponse, GetPostIndexResponse, GetPostResponse, GetThreadPostsPagedResponse, GetThreadResponse, GetThreadsPagedResponse, GetThreadSubscriptionStatusResponse, GetUserResponse, GetUsersBulkResponse, GetUsersPagedResponse } from './types.gen';

const portalDtoSchemaResponseTransformer = (data: any) => {
    data.readPolicy = policyValueSchemaResponseTransformer(data.readPolicy);
    data.forumCreatePolicy = policyValueSchemaResponseTransformer(data.forumCreatePolicy);
    data.categotyCreatePolicy = policyValueSchemaResponseTransformer(data.categotyCreatePolicy);
    data.threadCreatePolicy = policyValueSchemaResponseTransformer(data.threadCreatePolicy);
    data.postCreatePolicy = policyValueSchemaResponseTransformer(data.postCreatePolicy);
    return data;
};

export const getPortalResponseTransformer = async (data: any): Promise<GetPortalResponse> => {
    data = portalDtoSchemaResponseTransformer(data);
    return data;
};

const forumDtoSchemaResponseTransformer = (data: any) => {
    data.forumId = forumIdSchemaResponseTransformer(data.forumId);
    data.title = forumTitleSchemaResponseTransformer(data.title);
    if (data.createdBy) {
        data.createdBy = userIdSchemaResponseTransformer(data.createdBy);
    }
    data.createdAt = new Date(data.createdAt);
    data.readPolicyId = policyIdSchemaResponseTransformer(data.readPolicyId);
    data.categoryCreatePolicyId = policyIdSchemaResponseTransformer(data.categoryCreatePolicyId);
    data.threadCreatePolicyId = policyIdSchemaResponseTransformer(data.threadCreatePolicyId);
    data.postCreatePolicyId = policyIdSchemaResponseTransformer(data.postCreatePolicyId);
    return data;
};

export const getForumsPagedResponseTransformer = async (data: any): Promise<GetForumsPagedResponse> => {
    data = data.map((item: any) => {
        return forumDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const createForumResponseTransformer = async (data: any): Promise<CreateForumResponse> => {
    data = forumIdSchemaResponseTransformer(data);
    return data;
};

export const getForumResponseTransformer = async (data: any): Promise<GetForumResponse> => {
    data = forumDtoSchemaResponseTransformer(data);
    return data;
};

const threadDtoSchemaResponseTransformer = (data: any) => {
    data.threadId = threadIdSchemaResponseTransformer(data.threadId);
    data.categoryId = categoryIdSchemaResponseTransformer(data.categoryId);
    data.title = threadTitleSchemaResponseTransformer(data.title);
    if (data.createdBy) {
        data.createdBy = userIdSchemaResponseTransformer(data.createdBy);
    }
    data.createdAt = new Date(data.createdAt);
    data.status = threadStatusSchemaResponseTransformer(data.status);
    data.readPolicyId = policyIdSchemaResponseTransformer(data.readPolicyId);
    data.postCreatePolicyId = policyIdSchemaResponseTransformer(data.postCreatePolicyId);
    return data;
};

export const getThreadsPagedResponseTransformer = async (data: any): Promise<GetThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const createThreadResponseTransformer = async (data: any): Promise<CreateThreadResponse> => {
    data = threadIdSchemaResponseTransformer(data);
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = threadDtoSchemaResponseTransformer(data);
    return data;
};

const postDtoSchemaResponseTransformer = (data: any) => {
    data.postId = postIdSchemaResponseTransformer(data.postId);
    data.threadId = threadIdSchemaResponseTransformer(data.threadId);
    data.content = postContentSchemaResponseTransformer(data.content);
    if (data.createdBy) {
        data.createdBy = userIdSchemaResponseTransformer(data.createdBy);
    }
    data.createdAt = new Date(data.createdAt);
    if (data.updatedBy) {
        data.updatedBy = userIdSchemaResponseTransformer(data.updatedBy);
    }
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const getThreadPostsPagedResponseTransformer = async (data: any): Promise<GetThreadPostsPagedResponse> => {
    data = data.map((item: any) => {
        return postDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const createPostResponseTransformer = async (data: any): Promise<CreatePostResponse> => {
    data = postIdSchemaResponseTransformer(data);
    return data;
};

const categoryDtoSchemaResponseTransformer = (data: any) => {
    data.categoryId = categoryIdSchemaResponseTransformer(data.categoryId);
    data.forumId = forumIdSchemaResponseTransformer(data.forumId);
    data.title = categoryTitleSchemaResponseTransformer(data.title);
    if (data.createdBy) {
        data.createdBy = userIdSchemaResponseTransformer(data.createdBy);
    }
    data.createdAt = new Date(data.createdAt);
    data.readPolicyId = policyIdSchemaResponseTransformer(data.readPolicyId);
    data.threadCreatePolicyId = policyIdSchemaResponseTransformer(data.threadCreatePolicyId);
    data.postCreatePolicyId = policyIdSchemaResponseTransformer(data.postCreatePolicyId);
    return data;
};

export const getCategoriesPagedResponseTransformer = async (data: any): Promise<GetCategoriesPagedResponse> => {
    data = data.map((item: any) => {
        return categoryDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const createCategoryResponseTransformer = async (data: any): Promise<CreateCategoryResponse> => {
    data = categoryIdSchemaResponseTransformer(data);
    return data;
};

export const getCategoryResponseTransformer = async (data: any): Promise<GetCategoryResponse> => {
    data = categoryDtoSchemaResponseTransformer(data);
    return data;
};

export const getCategoryThreadsPagedResponseTransformer = async (data: any): Promise<GetCategoryThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getPostResponseTransformer = async (data: any): Promise<GetPostResponse> => {
    data = postDtoSchemaResponseTransformer(data);
    return data;
};

export const getPostIndexResponseTransformer = async (data: any): Promise<GetPostIndexResponse> => {
    data = postIndexSchemaResponseTransformer(data);
    return data;
};

export const getThreadSubscriptionStatusResponseTransformer = async (data: any): Promise<GetThreadSubscriptionStatusResponse> => {
    data = getThreadSubscriptionStatusQueryResultSchemaResponseTransformer(data);
    return data;
};

const internalNotificationsPagedDtoSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return internalNotificationDtoSchemaResponseTransformer(item);
    });
    return data;
};

const internalNotificationDtoSchemaResponseTransformer = (data: any) => {
    data.payload = notifiableEventPayloadSchemaResponseTransformer(data.payload);
    data.occurredAt = new Date(data.occurredAt);
    data.notifiableEventId = notifiableEventIdSchemaResponseTransformer(data.notifiableEventId);
    if (data.deliveredAt) {
        data.deliveredAt = new Date(data.deliveredAt);
    }
    return data;
};

export const getInternalNotificationsPagedResponseTransformer = async (data: any): Promise<GetInternalNotificationsPagedResponse> => {
    data = internalNotificationsPagedDtoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    data.userId = userIdSchemaResponseTransformer(data.userId);
    data.username = usernameSchemaResponseTransformer(data.username);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersPagedResponseTransformer = async (data: any): Promise<GetUsersPagedResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUserResponseTransformer = async (data: any): Promise<GetUserResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersBulkResponseTransformer = async (data: any): Promise<GetUsersBulkResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};
