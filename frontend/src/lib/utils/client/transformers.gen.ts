// This file is auto-generated by @hey-api/openapi-ts

import type { GetCategoriesPagedResponse, GetCategoryResponse, GetCategoryThreadsPagedResponse, GetForumResponse, GetForumsPagedResponse, GetInternalNotificationsPagedResponse, GetPostResponse, GetThreadPostsPagedResponse, GetThreadResponse, GetThreadsPagedResponse, GetUserResponse, GetUsersBulkResponse, GetUsersPagedResponse } from './types.gen';

const forumDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getForumsPagedResponseTransformer = async (data: any): Promise<GetForumsPagedResponse> => {
    data = data.map((item: any) => {
        return forumDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getForumResponseTransformer = async (data: any): Promise<GetForumResponse> => {
    data = forumDtoSchemaResponseTransformer(data);
    return data;
};

const threadDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getThreadsPagedResponseTransformer = async (data: any): Promise<GetThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getThreadResponseTransformer = async (data: any): Promise<GetThreadResponse> => {
    data = threadDtoSchemaResponseTransformer(data);
    return data;
};

const postDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const getThreadPostsPagedResponseTransformer = async (data: any): Promise<GetThreadPostsPagedResponse> => {
    data = data.map((item: any) => {
        return postDtoSchemaResponseTransformer(item);
    });
    return data;
};

const categoryDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getCategoriesPagedResponseTransformer = async (data: any): Promise<GetCategoriesPagedResponse> => {
    data = data.map((item: any) => {
        return categoryDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getCategoryResponseTransformer = async (data: any): Promise<GetCategoryResponse> => {
    data = categoryDtoSchemaResponseTransformer(data);
    return data;
};

export const getCategoryThreadsPagedResponseTransformer = async (data: any): Promise<GetCategoryThreadsPagedResponse> => {
    data = data.map((item: any) => {
        return threadDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getPostResponseTransformer = async (data: any): Promise<GetPostResponse> => {
    data = postDtoSchemaResponseTransformer(data);
    return data;
};

const internalNotificationDtoSchemaResponseTransformer = (data: any) => {
    data.occurredAt = new Date(data.occurredAt);
    if (data.deliveredAt) {
        data.deliveredAt = new Date(data.deliveredAt);
    }
    return data;
};

const internalNotificationsPagedDtoSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return internalNotificationDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getInternalNotificationsPagedResponseTransformer = async (data: any): Promise<GetInternalNotificationsPagedResponse> => {
    data = internalNotificationsPagedDtoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersPagedResponseTransformer = async (data: any): Promise<GetUsersPagedResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUserResponseTransformer = async (data: any): Promise<GetUserResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersBulkResponseTransformer = async (data: any): Promise<GetUsersBulkResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};
