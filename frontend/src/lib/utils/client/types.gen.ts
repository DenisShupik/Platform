// This file is auto-generated by @hey-api/openapi-ts

export type CategoryDto = {
    /**
     * Идентификатор категории
     */
    categoryId: CategoryId;
    /**
     * Идентификатор раздела
     */
    forumId: ForumId;
    /**
     * Наименование категории
     */
    title: string;
    /**
     * Дата и время создания категории
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего категорию
     */
    createdBy: UserId;
};

export type CategoryId = string;

export type CategoryNotFoundErrorReadable = {
    readonly $type: string;
    categoryId: CategoryId;
};

export type CategoryNotFoundErrorWritable = {
    categoryId: CategoryId;
};

export type CategoryTitle = string;

export type CreateCategoryRequest = {
    /**
     * Идентификатор раздела
     */
    forumId: ForumId;
    /**
     * Наименование категории
     */
    title: CategoryTitle;
};

export type CreateForumRequest = {
    /**
     * Наименование раздела
     */
    title: ForumTitle;
};

export type CreateThreadRequest = {
    /**
     * Идентификатор категории
     */
    categoryId: CategoryId;
    /**
     * Название темы
     */
    title: string;
};

export type ForumDto = {
    /**
     * Идентификатор раздела
     */
    forumId: ForumId;
    /**
     * Наименование раздела
     */
    title: ForumTitle;
    /**
     * Дата и время создания раздела
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего раздел
     */
    createdBy: UserId;
};

export type ForumId = string;

export type ForumNotFoundErrorReadable = {
    readonly $type: string;
    forumId: ForumId;
};

export type ForumNotFoundErrorWritable = {
    forumId: ForumId;
};

export type ForumTitle = string;

export type FromBody = {
    /**
     * Содержимое сообщения
     */
    content: string;
};

export type GetCategoryThreadsRequestSortType = 0;

export type GetCategoryThreadsRequestSortTypeSortCriteria = {
    field: GetCategoryThreadsRequestSortType;
    order: SortOrderType;
};

export type PostDto = {
    /**
     * Идентификатор сообщения
     */
    postId: PostId;
    /**
     * Идентификатор темы
     */
    threadId: ThreadId;
    /**
     * Содержимое сообщения
     */
    content: string;
    /**
     * Дата и время создания сообщения
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего сообщение
     */
    createdBy: UserId;
};

export type PostId = bigint;

export type SortOrderType = 0 | 1;

export type SortType = 0;

export type SortTypeSortCriteria = {
    field: SortType;
    order: SortOrderType;
};

export type ThreadDto = {
    /**
     * Идентификатор темы
     */
    threadId: ThreadId;
    /**
     * Последний использованный идентификатор сообщения
     */
    postIdSeq: bigint;
    /**
     * Идентификатор категории
     */
    categoryId: CategoryId;
    /**
     * Название темы
     */
    title: string;
    /**
     * Дата и время создания темы
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего тему
     */
    createdBy: UserId;
};

export type ThreadId = string;

export type ThreadNotFoundErrorReadable = {
    readonly $type: string;
    threadId: ThreadId;
};

export type ThreadNotFoundErrorWritable = {
    threadId: ThreadId;
};

export type UserDto = {
    /**
     * Идентификатор пользователя
     */
    userId: UserId;
    /**
     * Логин пользователя
     */
    username: string;
    /**
     * Электронная почта пользователя
     */
    email: string;
    /**
     * Активна ли учетная запись пользователя
     */
    enabled: boolean;
    /**
     * Дата и время создания учетной записи пользователя
     */
    createdAt: Date;
};

export type UserId = string;

export type UserNotFoundErrorReadable = {
    readonly $type: string;
    userId: UserId;
};

export type UserNotFoundErrorWritable = {
    userId: UserId;
};

export type GetCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
        forumId?: ForumId;
        title?: CategoryTitle;
    };
    url: '/api/categories';
};

export type GetCategoriesResponses = {
    /**
     * OK
     */
    200: Array<CategoryDto>;
};

export type GetCategoriesResponse = GetCategoriesResponses[keyof GetCategoriesResponses];

export type CreateCategoryData = {
    body: CreateCategoryRequest;
    path?: never;
    query?: never;
    url: '/api/categories';
};

export type CreateCategoryErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateCategoryResponses = {
    /**
     * OK
     */
    200: CategoryId;
};

export type CreateCategoryResponse = CreateCategoryResponses[keyof CreateCategoryResponses];

export type GetCategoryData = {
    body?: never;
    path: {
        categoryId: CategoryId;
    };
    query?: never;
    url: '/api/categories/{categoryId}';
};

export type GetCategoryErrors = {
    /**
     * Not Found
     */
    404: CategoryNotFoundErrorReadable;
};

export type GetCategoryError = GetCategoryErrors[keyof GetCategoryErrors];

export type GetCategoryResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type GetCategoryResponse = GetCategoryResponses[keyof GetCategoryResponses];

export type GetCategoriesPostsCountData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/posts/count';
};

export type GetCategoriesPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetCategoriesPostsCountResponse = GetCategoriesPostsCountResponses[keyof GetCategoriesPostsCountResponses];

export type GetCategoriesPostsLatestData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/posts/latest';
};

export type GetCategoriesPostsLatestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: PostDto;
    };
};

export type GetCategoriesPostsLatestResponse = GetCategoriesPostsLatestResponses[keyof GetCategoriesPostsLatestResponses];

export type GetCategoriesThreadsCountData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/threads/count';
};

export type GetCategoriesThreadsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetCategoriesThreadsCountResponse = GetCategoriesThreadsCountResponses[keyof GetCategoriesThreadsCountResponses];

export type GetCategoryThreadsData = {
    body?: never;
    path: {
        categoryId: CategoryId;
    };
    query?: {
        offset?: number;
        limit?: number;
        sort?: GetCategoryThreadsRequestSortTypeSortCriteria;
    };
    url: '/api/categories/{categoryId}/threads';
};

export type GetCategoryThreadsErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetCategoryThreadsResponses = {
    /**
     * OK
     */
    200: Array<ThreadDto>;
};

export type GetCategoryThreadsResponse = GetCategoryThreadsResponses[keyof GetCategoryThreadsResponses];

export type GetForumsCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/forums/count';
};

export type GetForumsCountErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetForumsCountResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type GetForumsCountResponse = GetForumsCountResponses[keyof GetForumsCountResponses];

export type GetForumsData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
        sort?: SortTypeSortCriteria;
        title?: ForumTitle;
    };
    url: '/api/forums';
};

export type GetForumsResponses = {
    /**
     * OK
     */
    200: Array<ForumDto>;
};

export type GetForumsResponse = GetForumsResponses[keyof GetForumsResponses];

export type CreateForumData = {
    body: CreateForumRequest;
    path?: never;
    query?: never;
    url: '/api/forums';
};

export type CreateForumErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateForumResponses = {
    /**
     * OK
     */
    200: ForumId;
};

export type CreateForumResponse = CreateForumResponses[keyof CreateForumResponses];

export type GetForumData = {
    body?: never;
    path: {
        forumId: ForumId;
    };
    query?: never;
    url: '/api/forums/{forumId}';
};

export type GetForumErrors = {
    /**
     * Not Found
     */
    404: ForumNotFoundErrorReadable;
};

export type GetForumError = GetForumErrors[keyof GetForumErrors];

export type GetForumResponses = {
    /**
     * OK
     */
    200: ForumDto;
};

export type GetForumResponse = GetForumResponses[keyof GetForumResponses];

export type GetForumsCategoriesCountData = {
    body?: never;
    path: {
        forumIds: Array<ForumId>;
    };
    query?: never;
    url: '/api/forums/{forumIds}/categories/count';
};

export type GetForumsCategoriesCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetForumsCategoriesCountResponse = GetForumsCategoriesCountResponses[keyof GetForumsCategoriesCountResponses];

export type GetForumsCategoriesLatestData = {
    body?: never;
    path: {
        forumIds: Array<ForumId>;
    };
    query?: {
        count?: number;
    };
    url: '/api/forums/{forumIds}/categories/latest';
};

export type GetForumsCategoriesLatestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: Array<CategoryDto>;
    };
};

export type GetForumsCategoriesLatestResponse = GetForumsCategoriesLatestResponses[keyof GetForumsCategoriesLatestResponses];

export type GetPostsData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
        threadId?: ThreadId;
    };
    url: '/api/posts';
};

export type GetPostsResponses = {
    /**
     * OK
     */
    200: Array<PostDto>;
};

export type GetPostsResponse = GetPostsResponses[keyof GetPostsResponses];

export type GetThreadData = {
    body?: never;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/threads/{threadId}';
};

export type GetThreadErrors = {
    /**
     * Not Found
     */
    404: ThreadNotFoundErrorReadable;
};

export type GetThreadError = GetThreadErrors[keyof GetThreadErrors];

export type GetThreadResponses = {
    /**
     * OK
     */
    200: ThreadDto;
};

export type GetThreadResponse = GetThreadResponses[keyof GetThreadResponses];

export type GetThreadsPostsCountData = {
    body?: never;
    path: {
        threadIds: Array<ThreadId>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/count';
};

export type GetThreadsPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetThreadsPostsCountResponse = GetThreadsPostsCountResponses[keyof GetThreadsPostsCountResponses];

export type GetThreadsPostsLatestData = {
    body?: never;
    path: {
        threadIds: Array<ThreadId>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/latest';
};

export type GetThreadsPostsLatestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: PostDto;
    };
};

export type GetThreadsPostsLatestResponse = GetThreadsPostsLatestResponses[keyof GetThreadsPostsLatestResponses];

export type CreateThreadData = {
    body: CreateThreadRequest;
    path?: never;
    query?: never;
    url: '/api/threads';
};

export type CreateThreadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateThreadResponses = {
    /**
     * OK
     */
    200: ThreadId;
};

export type CreateThreadResponse = CreateThreadResponses[keyof CreateThreadResponses];

export type CreatePostData = {
    body: FromBody;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/threads/{threadId}/posts';
};

export type CreatePostErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type CreatePostResponses = {
    /**
     * OK
     */
    200: PostId;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type DeleteAvatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type DeleteAvatarErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UploadAvatarData = {
    body?: {
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type UploadAvatarErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type UploadAvatarError = UploadAvatarErrors[keyof UploadAvatarErrors];

export type UploadAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/api/users';
};

export type GetUsersErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * OK
     */
    200: Array<UserDto>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        userId: UserId;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type GetUserByIdErrors = {
    /**
     * Not Found
     */
    404: UserNotFoundErrorReadable;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetUsersByIdsData = {
    body?: never;
    path: {
        userIds: Array<UserId>;
    };
    query?: never;
    url: '/api/users/batch/{userIds}';
};

export type GetUsersByIdsResponses = {
    /**
     * OK
     */
    200: Array<UserDto>;
};

export type GetUsersByIdsResponse = GetUsersByIdsResponses[keyof GetUsersByIdsResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};