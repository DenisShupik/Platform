// This file is auto-generated by @hey-api/openapi-ts

/**
 * Категория
 */
export type Category = {
    /**
     * Идентификатор категории
     */
    categoryId: bigint;
    /**
     * Идентификатор раздела
     */
    forumId: bigint;
    /**
     * Наименование категории
     */
    title: string;
    /**
     * Дата и время создания категории
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего категорию
     */
    createdBy: string;
    /**
     * Темы категории
     */
    threads: Array<Thread>;
};

export type CategoryKeysetPageResponse = {
    items: Array<Category>;
};

export type CreateCategoryRequest = {
    /**
     * Идентификатор раздела
     */
    forumId: bigint;
    /**
     * Наименование категории
     */
    title: string;
};

export type CreateForumRequest = {
    /**
     * Наименование раздела
     */
    title: string;
};

export type CreateThreadRequest = {
    /**
     * Идентификатор категории
     */
    categoryId: bigint;
    /**
     * Название темы
     */
    title: string;
};

export type FilterType = 'CategoryLatest' | 'ThreadLatest';

/**
 * Раздел
 */
export type Forum = {
    /**
     * Идентификатор раздела
     */
    forumId: bigint;
    /**
     * Наименование раздела
     */
    title: string;
    /**
     * Дата и время создания раздела
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего раздел
     */
    createdBy: string;
    /**
     * Категории раздела
     */
    categories: Array<Category>;
};

export type ForumKeysetPageResponse = {
    items: Array<Forum>;
};

export type FromBody = {
    /**
     * Содержимое сообщения
     */
    content: string;
};

export type GetCategoryPostsResponse = {
    categoryId: bigint;
    /**
     * Сообщение
     */
    post: Post;
};

export type GetCategoryThreadsRequestSortType = 'Activity';

export type GetCategoryThreadsRequestSortTypeSortCriteria = {
    field: GetCategoryThreadsRequestSortType;
    order: SortOrderType;
};

/**
 * Сообщение
 */
export type Post = {
    /**
     * Идентификатор сообщения
     */
    postId: bigint;
    /**
     * Идентификатор темы
     */
    threadId: bigint;
    /**
     * Содержимое сообщения
     */
    content: string;
    /**
     * Дата и время создания сообщения
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего сообщение
     */
    createdBy: string;
};

export type PostKeysetPageResponse = {
    items: Array<Post>;
};

export type SortOrderType = 0 | 1;

export type SortType = 0;

export type SortTypeSortCriteria = {
    field: SortType;
    order: SortOrderType;
};

/**
 * Тема
 */
export type Thread = {
    /**
     * Идентификатор темы
     */
    threadId: bigint;
    /**
     * Последний использованный идентификатор сообщения
     */
    postIdSeq: bigint;
    /**
     * Идентификатор категории
     */
    categoryId: bigint;
    /**
     * Название темы
     */
    title: string;
    /**
     * Дата и время создания темы
     */
    created: Date;
    /**
     * Идентификатор пользователя, создавшего тему
     */
    createdBy: string;
    /**
     * Сообщения темы
     */
    posts: Array<Post>;
};

export type UserDtoReadable = {
    /**
     * Идентификатор пользователя
     */
    userId: UserIdReadable;
    /**
     * Логин пользователя
     */
    username: string;
    /**
     * Электронная почта пользователя
     */
    email: string;
    /**
     * Активна ли учетная запись пользователя
     */
    enabled: boolean;
    /**
     * Дата и время создания учетной записи пользователя
     */
    createdAt: Date;
};

export type UserDtoWritable = {
    /**
     * Идентификатор пользователя
     */
    userId: UserIdWritable;
    /**
     * Логин пользователя
     */
    username: string;
    /**
     * Электронная почта пользователя
     */
    email: string;
    /**
     * Активна ли учетная запись пользователя
     */
    enabled: boolean;
    /**
     * Дата и время создания учетной записи пользователя
     */
    createdAt: Date;
};

export type UserIdReadable = {
    readonly value: string;
};

export type UserIdWritable = {
    [key: string]: never;
};

export type UserNotFoundErrorReadable = {
    readonly $type: string;
    userId: UserIdReadable;
};

export type UserNotFoundErrorWritable = {
    userId: UserIdWritable;
};

export type GetCategoryPostsCountData = {
    body?: never;
    path: {
        categoryIds: Array<bigint>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/posts/count';
};

export type GetCategoryPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetCategoryPostsCountResponse = GetCategoryPostsCountResponses[keyof GetCategoryPostsCountResponses];

export type GetCategoryPostsData = {
    body?: never;
    path: {
        categoryIds: Array<bigint>;
    };
    query: {
        latest: boolean;
    };
    url: '/api/categories/{categoryIds}/posts';
};

export type GetCategoryPostsResponses = {
    /**
     * OK
     */
    200: Array<GetCategoryPostsResponse>;
};

export type GetCategoryPostsResponse2 = GetCategoryPostsResponses[keyof GetCategoryPostsResponses];

export type GetCategoryData = {
    body?: never;
    path: {
        categoryId: bigint;
    };
    query?: never;
    url: '/api/categories/{categoryId}';
};

export type GetCategoryErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetCategoryResponses = {
    /**
     * OK
     */
    200: Category;
};

export type GetCategoryResponse = GetCategoryResponses[keyof GetCategoryResponses];

export type GetCategoryThreadsCountData = {
    body?: never;
    path: {
        categoryIds: Array<bigint>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/threads/count';
};

export type GetCategoryThreadsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetCategoryThreadsCountResponse = GetCategoryThreadsCountResponses[keyof GetCategoryThreadsCountResponses];

export type GetCategoryThreadsData = {
    body?: never;
    path: {
        categoryId: bigint;
    };
    query?: {
        sort?: GetCategoryThreadsRequestSortTypeSortCriteria;
        cursor?: bigint;
        limit?: number;
    };
    url: '/api/categories/{categoryId}/threads';
};

export type GetCategoryThreadsErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetCategoryThreadsResponses = {
    /**
     * OK
     */
    200: Array<Thread>;
};

export type GetCategoryThreadsResponse = GetCategoryThreadsResponses[keyof GetCategoryThreadsResponses];

export type CreateCategoryData = {
    body: CreateCategoryRequest;
    path?: never;
    query?: never;
    url: '/api/categories';
};

export type CreateCategoryErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateCategoryResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type CreateCategoryResponse = CreateCategoryResponses[keyof CreateCategoryResponses];

export type GetForumsCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/forums/count';
};

export type GetForumsCountErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetForumsCountResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type GetForumsCountResponse = GetForumsCountResponses[keyof GetForumsCountResponses];

export type GetForumsData = {
    body?: never;
    path?: never;
    query?: {
        sort?: SortTypeSortCriteria;
        cursor?: bigint;
        limit?: number;
    };
    url: '/api/forums';
};

export type GetForumsResponses = {
    /**
     * OK
     */
    200: ForumKeysetPageResponse;
};

export type GetForumsResponse = GetForumsResponses[keyof GetForumsResponses];

export type CreateForumData = {
    body: CreateForumRequest;
    path?: never;
    query?: never;
    url: '/api/forums';
};

export type CreateForumErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateForumResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type CreateForumResponse = CreateForumResponses[keyof CreateForumResponses];

export type GetForumData = {
    body?: never;
    path: {
        forumId: bigint;
    };
    query?: never;
    url: '/api/forums/{forumId}';
};

export type GetForumErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetForumResponses = {
    /**
     * OK
     */
    200: Forum;
};

export type GetForumResponse = GetForumResponses[keyof GetForumResponses];

export type GetForumCategoriesCountData = {
    body?: never;
    path: {
        forumIds: Array<bigint>;
    };
    query?: never;
    url: '/api/forums/{forumIds}/categories/count';
};

export type GetForumCategoriesCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetForumCategoriesCountResponse = GetForumCategoriesCountResponses[keyof GetForumCategoriesCountResponses];

export type GetForumCategoriesData = {
    body?: never;
    path: {
        forumId: bigint;
    };
    query?: {
        cursor?: bigint;
        limit?: number;
    };
    url: '/api/forums/{forumId}/categories';
};

export type GetForumCategoriesResponses = {
    /**
     * OK
     */
    200: CategoryKeysetPageResponse;
};

export type GetForumCategoriesResponse = GetForumCategoriesResponses[keyof GetForumCategoriesResponses];

export type GetForumsCategoriesLatestByPostData = {
    body?: never;
    path: {
        forumIds: Array<bigint>;
    };
    query?: {
        count?: number;
    };
    url: '/api/forums/{forumIds}/categories/latest-by-post';
};

export type GetForumsCategoriesLatestByPostResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: Array<Category>;
    };
};

export type GetForumsCategoriesLatestByPostResponse = GetForumsCategoriesLatestByPostResponses[keyof GetForumsCategoriesLatestByPostResponses];

export type GetPostsData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<bigint>;
        filter?: FilterType;
        cursor?: bigint;
        limit?: number;
    };
    url: '/api/posts';
};

export type GetPostsResponses = {
    /**
     * OK
     */
    200: PostKeysetPageResponse;
};

export type GetPostsResponse = GetPostsResponses[keyof GetPostsResponses];

export type GetThreadData = {
    body?: never;
    path: {
        threadId: bigint;
    };
    query?: never;
    url: '/api/threads/{threadId}';
};

export type GetThreadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetThreadResponses = {
    /**
     * OK
     */
    200: Thread;
};

export type GetThreadResponse = GetThreadResponses[keyof GetThreadResponses];

export type GetThreadPostsCountData = {
    body?: never;
    path: {
        threadIds: Array<bigint>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/count';
};

export type GetThreadPostsCountErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetThreadPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: bigint;
    };
};

export type GetThreadPostsCountResponse = GetThreadPostsCountResponses[keyof GetThreadPostsCountResponses];

export type GetThreadPostsLatestData = {
    body?: never;
    path: {
        threadIds: Array<bigint>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/latest';
};

export type GetThreadPostsLatestErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetThreadPostsLatestResponses = {
    /**
     * OK
     */
    200: Array<Post>;
};

export type GetThreadPostsLatestResponse = GetThreadPostsLatestResponses[keyof GetThreadPostsLatestResponses];

export type GetThreadPostsData = {
    body?: never;
    path: {
        threadId: bigint;
    };
    query?: {
        cursor?: bigint;
        limit?: number;
    };
    url: '/api/threads/{threadId}/posts';
};

export type GetThreadPostsResponses = {
    /**
     * OK
     */
    200: PostKeysetPageResponse;
};

export type GetThreadPostsResponse = GetThreadPostsResponses[keyof GetThreadPostsResponses];

export type CreatePostData = {
    body: FromBody;
    path: {
        threadId: bigint;
    };
    query?: never;
    url: '/api/threads/{threadId}/posts';
};

export type CreatePostErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type CreatePostResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type CreateThreadData = {
    body: CreateThreadRequest;
    path?: never;
    query?: never;
    url: '/api/threads';
};

export type CreateThreadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateThreadResponses = {
    /**
     * OK
     */
    200: bigint;
};

export type CreateThreadResponse = CreateThreadResponses[keyof CreateThreadResponses];

export type DeleteAvatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type DeleteAvatarErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UploadAvatarData = {
    body?: {
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type UploadAvatarErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type UploadAvatarError = UploadAvatarErrors[keyof UploadAvatarErrors];

export type UploadAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/api/users';
};

export type GetUsersErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * OK
     */
    200: Array<UserDtoReadable>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        userId: UserIdWritable;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type GetUserByIdErrors = {
    /**
     * Not Found
     */
    404: UserNotFoundErrorReadable;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * OK
     */
    200: UserDtoReadable;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetUsersByIdsData = {
    body?: never;
    path: {
        userIds: Array<UserIdWritable>;
    };
    query?: never;
    url: '/api/users/batch/{userIds}';
};

export type GetUsersByIdsResponses = {
    /**
     * OK
     */
    200: Array<UserDtoReadable>;
};

export type GetUsersByIdsResponse = GetUsersByIdsResponses[keyof GetUsersByIdsResponses];

export type ClientOptions = {
    baseUrl: 'https://localhost:8000' | (string & {});
};