// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};

export type ActivityDto = {
    $type?: 'PostAdded';
} & ActivityDtoPostAddedActivityDto;

export type ActivityDtoPostAddedActivityDto = {
    $type: 'PostAdded';
    forumId: ForumId;
    categoryId: CategoryId;
    threadId: ThreadId;
    postId: PostId;
    occurredBy: UserId;
    occurredAt: Date;
};

export enum ActivityType {
    /**
     * PostAdded
     */
    POST_ADDED = 0
}

export type CategoryDto = {
    categoryId: CategoryId;
    forumId: ForumId;
    title: CategoryTitle;
    createdBy: UserId;
    createdAt: Date;
};

export type CategoryId = string;

export type CategoryNotFoundError = {
    readonly $type: string;
    categoryId: CategoryId;
};

export type CategoryTitle = string;

export type CreateCategoryRequestBody = {
    forumId: ForumId;
    title: CategoryTitle;
};

export type CreateForumRequestBody = {
    title: ForumTitle;
};

export type CreatePostRequestBody = {
    content: PostContent;
};

export type CreateThreadRequestBody = {
    categoryId: CategoryId;
    title: ThreadTitle;
};

export type ForumDto = {
    forumId: ForumId;
    title: ForumTitle;
    createdBy: UserId;
    createdAt: Date;
};

export type ForumId = string;

export type ForumNotFoundError = {
    readonly $type: string;
    forumId: ForumId;
};

export type ForumTitle = string;

export enum GetActivitiesPagedQueryGroupByType {
    /**
     * Forum
     */
    FORUM = 0,
    /**
     * Category
     */
    CATEGORY = 1,
    /**
     * Thread
     */
    THREAD = 2
}

export enum GetActivitiesPagedQueryModeType {
    /**
     * Latest
     */
    LATEST = 0
}

export enum GetActivitiesPagedQuerySortType {
    /**
     * LatestAsc
     * Sort by Latest ascending
     */
    LATEST_ASC = 'latest',
    /**
     * LatestDesc
     * Sort by Latest descending
     */
    LATEST_DESC = '-latest'
}

export enum GetCategoriesPagedQuerySortType {
    /**
     * CategoryIdAsc
     * Sort by CategoryId ascending
     */
    CATEGORY_ID_ASC = 'categoryid',
    /**
     * ForumIdAsc
     * Sort by ForumId ascending
     */
    FORUM_ID_ASC = 'forumid',
    /**
     * CategoryIdDesc
     * Sort by CategoryId descending
     */
    CATEGORY_ID_DESC = '-categoryid',
    /**
     * ForumIdDesc
     * Sort by ForumId descending
     */
    FORUM_ID_DESC = '-forumid'
}

export enum GetCategoryThreadsPagedQuerySortType {
    /**
     * ActivityAsc
     * Sort by Activity ascending
     */
    ACTIVITY_ASC = 'activity',
    /**
     * ActivityDesc
     * Sort by Activity descending
     */
    ACTIVITY_DESC = '-activity'
}

export enum GetForumsPagedQuerySortType {
    /**
     * ForumIdAsc
     * Sort by ForumId ascending
     */
    FORUM_ID_ASC = 'forumid',
    /**
     * ForumIdDesc
     * Sort by ForumId descending
     */
    FORUM_ID_DESC = '-forumid'
}

export enum GetThreadPostsPagedQuerySortType {
    /**
     * IndexAsc
     * Sort by Index ascending
     */
    INDEX_ASC = 'index',
    /**
     * IndexDesc
     * Sort by Index descending
     */
    INDEX_DESC = '-index'
}

export enum GetThreadsPagedQuerySortType {
    /**
     * ThreadIdAsc
     * Sort by ThreadId ascending
     */
    THREAD_ID_ASC = 'threadid',
    /**
     * ThreadIdDesc
     * Sort by ThreadId descending
     */
    THREAD_ID_DESC = '-threadid'
}

export type NonPostAuthorError = {
    readonly $type: string;
    threadId: ThreadId;
    postId: PostId;
};

export type NonThreadOwnerError = {
    readonly $type: string;
    threadId: ThreadId;
};

export type NotOwnerError = {
    readonly $type: string;
};

export type PaginationLimitMin10Max100 = number;

export type PaginationOffset = number;

export type PostContent = string;

export type PostDto = {
    postId: PostId;
    threadId: ThreadId;
    content: PostContent;
    createdBy: UserId;
    createdAt: Date;
    updatedBy: UserId;
    updatedAt: Date;
    rowVersion: number;
};

export type PostId = string;

export type PostIndex = number;

export type PostNotFoundError = {
    readonly $type: string;
    postId: PostId;
};

export type PostStaleError = {
    readonly $type: string;
    threadId: ThreadId;
    postId: PostId;
    rowVersion: number;
};

export type ThreadDto = {
    threadId: ThreadId;
    categoryId: CategoryId;
    title: ThreadTitle;
    createdBy: UserId;
    createdAt: Date;
    status: ThreadStatus;
};

export type ThreadId = string;

export type ThreadNotFoundError = {
    readonly $type: string;
    threadId: ThreadId;
};

export enum ThreadStatus {
    /**
     * Draft
     */
    DRAFT = 0,
    /**
     * Published
     */
    PUBLISHED = 1
}

export type ThreadTitle = string;

export type UpdatePostRequestBody = {
    content: PostContent;
    rowVersion: number;
};

export type UserId = string;

export type IFormFile = Blob | File;

export enum ChannelType {
    /**
     * Internal
     */
    INTERNAL = 0,
    /**
     * Email
     */
    EMAIL = 1
}

export type CreateThreadSubscriptionRequestBody = {
    channels: Array<ChannelType>;
};

export type DuplicateThreadSubscriptionError = {
    readonly $type: string;
    userId: UserId;
    threadId: ThreadId;
};

export enum GetInternalNotificationsPagedQuerySortType {
    /**
     * OccurredAtAsc
     * Sort by OccurredAt ascending
     */
    OCCURRED_AT_ASC = 'occurredat',
    /**
     * DeliveredAtAsc
     * Sort by DeliveredAt ascending
     */
    DELIVERED_AT_ASC = 'deliveredat',
    /**
     * OccurredAtDesc
     * Sort by OccurredAt descending
     */
    OCCURRED_AT_DESC = '-occurredat',
    /**
     * DeliveredAtDesc
     * Sort by DeliveredAt descending
     */
    DELIVERED_AT_DESC = '-deliveredat'
}

export type GetThreadSubscriptionStatusQueryResult = {
    isSubscribed: boolean;
};

export type InternalNotificationDto = {
    payload: NotifiableEventPayload;
    occurredAt: Date;
    notifiableEventId: NotifiableEventId;
    deliveredAt?: null | Date;
};

export type InternalNotificationsPagedDto = {
    notifications: Array<InternalNotificationDto>;
    threads: {
        [key: string]: ThreadTitle;
    };
    users: {
        [key: string]: Username;
    };
    totalCount: number;
};

export type NotifiableEventId = string;

export type NotifiableEventPayload = ({
    $type?: 'PostAdded';
} & NotifiableEventPayloadPostAddedNotifiableEventPayload) | ({
    $type?: 'PostUpdated';
} & NotifiableEventPayloadPostUpdatedNotifiableEventPayload);

export type NotifiableEventPayloadPostAddedNotifiableEventPayload = {
    $type: 'PostAdded';
    threadId: ThreadId;
    postId: PostId;
    createdBy: UserId;
};

export type NotifiableEventPayloadPostUpdatedNotifiableEventPayload = {
    $type: 'PostUpdated';
    threadId: ThreadId;
    postId: PostId;
    updatedBy: UserId;
};

export type NotificationNotFoundError = {
    readonly $type: string;
    userId: UserId;
    notifiableEventId: NotifiableEventId;
    channel: ChannelType;
};

export type ThreadSubscriptionNotFoundError = {
    readonly $type: string;
    userId: UserId;
    threadId: ThreadId;
};

export type Username = string;

export enum GetUsersPagedQuerySortType {
    /**
     * UserIdAsc
     * Sort by UserId ascending
     */
    USER_ID_ASC = 'userid',
    /**
     * UserIdDesc
     * Sort by UserId descending
     */
    USER_ID_DESC = '-userid'
}

export type UserDto = {
    userId: UserId;
    username: Username;
    email: string;
    enabled: boolean;
    createdAt: Date;
};

export type UserNotFoundError = {
    readonly $type: string;
    userId: UserId;
};

export type CategoryNotFoundErrorWritable = {
    categoryId: CategoryId;
};

export type ForumNotFoundErrorWritable = {
    forumId: ForumId;
};

export type NonPostAuthorErrorWritable = {
    threadId: ThreadId;
    postId: PostId;
};

export type NonThreadOwnerErrorWritable = {
    threadId: ThreadId;
};

export type PostNotFoundErrorWritable = {
    postId: PostId;
};

export type PostStaleErrorWritable = {
    threadId: ThreadId;
    postId: PostId;
    rowVersion: number;
};

export type ThreadNotFoundErrorWritable = {
    threadId: ThreadId;
};

export type DuplicateThreadSubscriptionErrorWritable = {
    userId: UserId;
    threadId: ThreadId;
};

export type NotificationNotFoundErrorWritable = {
    userId: UserId;
    notifiableEventId: NotifiableEventId;
    channel: ChannelType;
};

export type ThreadSubscriptionNotFoundErrorWritable = {
    userId: UserId;
    threadId: ThreadId;
};

export type UserNotFoundErrorWritable = {
    userId: UserId;
};

export type GetActivitiesPagedData = {
    body?: never;
    path?: never;
    query: {
        activity: ActivityType;
        groupBy: GetActivitiesPagedQueryGroupByType;
        mode: GetActivitiesPagedQueryModeType;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: Array<GetActivitiesPagedQuerySortType>;
    };
    url: '/api/activities';
};

export type GetActivitiesPagedResponses = {
    /**
     * OK
     */
    200: Array<ActivityDto>;
};

export type GetActivitiesPagedResponse = GetActivitiesPagedResponses[keyof GetActivitiesPagedResponses];

export type GetCategoriesPagedData = {
    body?: never;
    path?: never;
    query?: {
        forumIds?: Array<ForumId>;
        title?: CategoryTitle;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: Array<GetCategoriesPagedQuerySortType>;
    };
    url: '/api/categories';
};

export type GetCategoriesPagedResponses = {
    /**
     * OK
     */
    200: Array<CategoryDto>;
};

export type GetCategoriesPagedResponse = GetCategoriesPagedResponses[keyof GetCategoriesPagedResponses];

export type CreateCategoryData = {
    body: CreateCategoryRequestBody;
    path?: never;
    query?: never;
    url: '/api/categories';
};

export type CreateCategoryErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ForumNotFoundError;
};

export type CreateCategoryError = CreateCategoryErrors[keyof CreateCategoryErrors];

export type CreateCategoryResponses = {
    /**
     * OK
     */
    200: CategoryId;
};

export type CreateCategoryResponse = CreateCategoryResponses[keyof CreateCategoryResponses];

export type GetCategoryData = {
    body?: never;
    path: {
        categoryId: CategoryId;
    };
    query?: never;
    url: '/api/categories/{categoryId}';
};

export type GetCategoryErrors = {
    /**
     * Not Found
     */
    404: CategoryNotFoundError;
};

export type GetCategoryError = GetCategoryErrors[keyof GetCategoryErrors];

export type GetCategoryResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type GetCategoryResponse = GetCategoryResponses[keyof GetCategoryResponses];

export type GetCategoriesPostsCountData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/posts/count';
};

export type GetCategoriesPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type GetCategoriesPostsCountResponse = GetCategoriesPostsCountResponses[keyof GetCategoriesPostsCountResponses];

export type GetCategoriesPostsLatestData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: never;
    url: '/api/categories/{categoryIds}/posts/latest';
};

export type GetCategoriesPostsLatestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: PostDto;
    };
};

export type GetCategoriesPostsLatestResponse = GetCategoriesPostsLatestResponses[keyof GetCategoriesPostsLatestResponses];

export type GetCategoriesThreadsCountData = {
    body?: never;
    path: {
        categoryIds: Array<CategoryId>;
    };
    query?: {
        includeDraft?: boolean;
    };
    url: '/api/categories/{categoryIds}/threads/count';
};

export type GetCategoriesThreadsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type GetCategoriesThreadsCountResponse = GetCategoriesThreadsCountResponses[keyof GetCategoriesThreadsCountResponses];

export type GetCategoryThreadsPagedData = {
    body?: never;
    path: {
        categoryId: CategoryId;
    };
    query?: {
        includeDraft?: boolean;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: GetCategoryThreadsPagedQuerySortType;
    };
    url: '/api/categories/{categoryId}/threads';
};

export type GetCategoryThreadsPagedErrors = {
    /**
     * Not Found
     */
    404: CategoryNotFoundError;
};

export type GetCategoryThreadsPagedError = GetCategoryThreadsPagedErrors[keyof GetCategoryThreadsPagedErrors];

export type GetCategoryThreadsPagedResponses = {
    /**
     * OK
     */
    200: Array<ThreadDto>;
};

export type GetCategoryThreadsPagedResponse = GetCategoryThreadsPagedResponses[keyof GetCategoryThreadsPagedResponses];

export type GetForumsCountData = {
    body?: never;
    path?: never;
    query?: {
        createdBy?: UserId;
    };
    url: '/api/forums/count';
};

export type GetForumsCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type GetForumsCountResponse = GetForumsCountResponses[keyof GetForumsCountResponses];

export type GetForumsPagedData = {
    body?: never;
    path?: never;
    query?: {
        title?: ForumTitle;
        createdBy?: UserId;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: GetForumsPagedQuerySortType;
    };
    url: '/api/forums';
};

export type GetForumsPagedResponses = {
    /**
     * OK
     */
    200: Array<ForumDto>;
};

export type GetForumsPagedResponse = GetForumsPagedResponses[keyof GetForumsPagedResponses];

export type CreateForumData = {
    body: CreateForumRequestBody;
    path?: never;
    query?: never;
    url: '/api/forums';
};

export type CreateForumErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreateForumResponses = {
    /**
     * OK
     */
    200: ForumId;
};

export type CreateForumResponse = CreateForumResponses[keyof CreateForumResponses];

export type GetForumData = {
    body?: never;
    path: {
        forumId: ForumId;
    };
    query?: never;
    url: '/api/forums/{forumId}';
};

export type GetForumErrors = {
    /**
     * Not Found
     */
    404: ForumNotFoundError;
};

export type GetForumError = GetForumErrors[keyof GetForumErrors];

export type GetForumResponses = {
    /**
     * OK
     */
    200: ForumDto;
};

export type GetForumResponse = GetForumResponses[keyof GetForumResponses];

export type GetForumsCategoriesCountData = {
    body?: never;
    path: {
        forumIds: Array<ForumId>;
    };
    query?: never;
    url: '/api/forums/{forumIds}/categories/count';
};

export type GetForumsCategoriesCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type GetForumsCategoriesCountResponse = GetForumsCategoriesCountResponses[keyof GetForumsCategoriesCountResponses];

export type GetPostIndexData = {
    body?: never;
    path: {
        postId: PostId;
    };
    query?: never;
    url: '/api/posts/{postId}/order';
};

export type GetPostIndexErrors = {
    /**
     * Not Found
     */
    404: PostNotFoundError;
};

export type GetPostIndexError = GetPostIndexErrors[keyof GetPostIndexErrors];

export type GetPostIndexResponses = {
    /**
     * OK
     */
    200: PostIndex;
};

export type GetPostIndexResponse = GetPostIndexResponses[keyof GetPostIndexResponses];

export type UpdatePostData = {
    body: UpdatePostRequestBody;
    path: {
        postId: PostId;
    };
    query?: never;
    url: '/api/posts/{postId}';
};

export type UpdatePostErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: NonPostAuthorError;
    /**
     * Not Found
     */
    404: PostNotFoundError;
    /**
     * Conflict
     */
    409: PostStaleError;
};

export type UpdatePostError = UpdatePostErrors[keyof UpdatePostErrors];

export type UpdatePostResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetThreadsPagedData = {
    body?: never;
    path?: never;
    query?: {
        createdBy?: UserId;
        status?: ThreadStatus;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: GetThreadsPagedQuerySortType;
    };
    url: '/api/threads';
};

export type GetThreadsPagedErrors = {
    /**
     * Forbidden
     */
    403: NotOwnerError;
};

export type GetThreadsPagedError = GetThreadsPagedErrors[keyof GetThreadsPagedErrors];

export type GetThreadsPagedResponses = {
    /**
     * OK
     */
    200: Array<ThreadDto>;
};

export type GetThreadsPagedResponse = GetThreadsPagedResponses[keyof GetThreadsPagedResponses];

export type CreateThreadData = {
    body: CreateThreadRequestBody;
    path?: never;
    query?: never;
    url: '/api/threads';
};

export type CreateThreadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: CategoryNotFoundError;
};

export type CreateThreadError = CreateThreadErrors[keyof CreateThreadErrors];

export type CreateThreadResponses = {
    /**
     * OK
     */
    200: ThreadId;
};

export type CreateThreadResponse = CreateThreadResponses[keyof CreateThreadResponses];

export type GetThreadsCountData = {
    body?: never;
    path?: never;
    query?: {
        createdBy?: UserId;
        status?: ThreadStatus;
    };
    url: '/api/threads/count';
};

export type GetThreadsCountErrors = {
    /**
     * Forbidden
     */
    403: NotOwnerError;
};

export type GetThreadsCountError = GetThreadsCountErrors[keyof GetThreadsCountErrors];

export type GetThreadsCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type GetThreadsCountResponse = GetThreadsCountResponses[keyof GetThreadsCountResponses];

export type GetThreadData = {
    body?: never;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/threads/{threadId}';
};

export type GetThreadErrors = {
    /**
     * Forbidden
     */
    403: NonThreadOwnerError;
    /**
     * Not Found
     */
    404: ThreadNotFoundError;
};

export type GetThreadError = GetThreadErrors[keyof GetThreadErrors];

export type GetThreadResponses = {
    /**
     * OK
     */
    200: ThreadDto;
};

export type GetThreadResponse = GetThreadResponses[keyof GetThreadResponses];

export type GetThreadPostsPagedData = {
    body?: never;
    path: {
        threadId: ThreadId;
    };
    query?: {
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: GetThreadPostsPagedQuerySortType;
    };
    url: '/api/threads/{threadId}/posts';
};

export type GetThreadPostsPagedErrors = {
    /**
     * Not Found
     */
    404: ThreadNotFoundError;
};

export type GetThreadPostsPagedError = GetThreadPostsPagedErrors[keyof GetThreadPostsPagedErrors];

export type GetThreadPostsPagedResponses = {
    /**
     * OK
     */
    200: Array<PostDto>;
};

export type GetThreadPostsPagedResponse = GetThreadPostsPagedResponses[keyof GetThreadPostsPagedResponses];

export type CreatePostData = {
    body: CreatePostRequestBody;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/threads/{threadId}/posts';
};

export type CreatePostErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: NonThreadOwnerError;
    /**
     * Not Found
     */
    404: ThreadNotFoundError;
};

export type CreatePostError = CreatePostErrors[keyof CreatePostErrors];

export type CreatePostResponses = {
    /**
     * OK
     */
    200: PostId;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type GetThreadsPostsCountData = {
    body?: never;
    path: {
        threadIds: Array<ThreadId>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/count';
};

export type GetThreadsPostsCountResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type GetThreadsPostsCountResponse = GetThreadsPostsCountResponses[keyof GetThreadsPostsCountResponses];

export type GetThreadsPostsLatestData = {
    body?: never;
    path: {
        threadIds: Array<ThreadId>;
    };
    query?: never;
    url: '/api/threads/{threadIds}/posts/latest';
};

export type GetThreadsPostsLatestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: PostDto;
    };
};

export type GetThreadsPostsLatestResponse = GetThreadsPostsLatestResponses[keyof GetThreadsPostsLatestResponses];

export type DeleteAvatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type DeleteAvatarErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UploadAvatarData = {
    body: {
        file: IFormFile;
    };
    path?: never;
    query?: never;
    url: '/api/avatars';
};

export type UploadAvatarErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type UploadAvatarError = UploadAvatarErrors[keyof UploadAvatarErrors];

export type UploadAvatarResponses = {
    /**
     * No Content
     */
    204: void;
};

export type UploadAvatarResponse = UploadAvatarResponses[keyof UploadAvatarResponses];

export type GetThreadSubscriptionStatusData = {
    body?: never;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/thread/{threadId}/subscriptions/status';
};

export type GetThreadSubscriptionStatusErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetThreadSubscriptionStatusResponses = {
    /**
     * OK
     */
    200: GetThreadSubscriptionStatusQueryResult;
};

export type GetThreadSubscriptionStatusResponse = GetThreadSubscriptionStatusResponses[keyof GetThreadSubscriptionStatusResponses];

export type DeleteThreadSubscriptionData = {
    body?: never;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/thread/{threadId}/subscriptions';
};

export type DeleteThreadSubscriptionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ThreadSubscriptionNotFoundError;
};

export type DeleteThreadSubscriptionError = DeleteThreadSubscriptionErrors[keyof DeleteThreadSubscriptionErrors];

export type DeleteThreadSubscriptionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteThreadSubscriptionResponse = DeleteThreadSubscriptionResponses[keyof DeleteThreadSubscriptionResponses];

export type CreateThreadSubscriptionData = {
    body: CreateThreadSubscriptionRequestBody;
    path: {
        threadId: ThreadId;
    };
    query?: never;
    url: '/api/thread/{threadId}/subscriptions';
};

export type CreateThreadSubscriptionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Conflict
     */
    409: DuplicateThreadSubscriptionError;
};

export type CreateThreadSubscriptionError = CreateThreadSubscriptionErrors[keyof CreateThreadSubscriptionErrors];

export type CreateThreadSubscriptionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type CreateThreadSubscriptionResponse = CreateThreadSubscriptionResponses[keyof CreateThreadSubscriptionResponses];

export type GetInternalNotificationCountData = {
    body?: never;
    path?: never;
    query?: {
        isDelivered?: boolean;
    };
    url: '/api/me/notifications/count';
};

export type GetInternalNotificationCountErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetInternalNotificationCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type GetInternalNotificationCountResponse = GetInternalNotificationCountResponses[keyof GetInternalNotificationCountResponses];

export type GetInternalNotificationsPagedData = {
    body?: never;
    path?: never;
    query?: {
        isDelivered?: boolean;
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: Array<GetInternalNotificationsPagedQuerySortType>;
    };
    url: '/api/me/notifications';
};

export type GetInternalNotificationsPagedErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetInternalNotificationsPagedResponses = {
    /**
     * OK
     */
    200: InternalNotificationsPagedDto;
};

export type GetInternalNotificationsPagedResponse = GetInternalNotificationsPagedResponses[keyof GetInternalNotificationsPagedResponses];

export type MarkInternalNotificationAsReadData = {
    body?: never;
    path: {
        notifiableEventId: NotifiableEventId;
    };
    query?: never;
    url: '/api/me/notifications/{notifiableEventId}/mark-read';
};

export type MarkInternalNotificationAsReadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: NotificationNotFoundError;
};

export type MarkInternalNotificationAsReadError = MarkInternalNotificationAsReadErrors[keyof MarkInternalNotificationAsReadErrors];

export type MarkInternalNotificationAsReadResponses = {
    /**
     * No Content
     */
    204: void;
};

export type MarkInternalNotificationAsReadResponse = MarkInternalNotificationAsReadResponses[keyof MarkInternalNotificationAsReadResponses];

export type DeleteInternalNotificationData = {
    body?: never;
    path: {
        notifiableEventId: NotifiableEventId;
    };
    query?: never;
    url: '/api/me/notifications/{notifiableEventId}';
};

export type DeleteInternalNotificationErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: NotificationNotFoundError;
};

export type DeleteInternalNotificationError = DeleteInternalNotificationErrors[keyof DeleteInternalNotificationErrors];

export type DeleteInternalNotificationResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteInternalNotificationResponse = DeleteInternalNotificationResponses[keyof DeleteInternalNotificationResponses];

export type GetUsersPagedData = {
    body?: never;
    path?: never;
    query?: {
        offset?: PaginationOffset;
        limit?: PaginationLimitMin10Max100;
        sort?: GetUsersPagedQuerySortType;
    };
    url: '/api/users';
};

export type GetUsersPagedErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type GetUsersPagedError = GetUsersPagedErrors[keyof GetUsersPagedErrors];

export type GetUsersPagedResponses = {
    /**
     * OK
     */
    200: Array<UserDto>;
};

export type GetUsersPagedResponse = GetUsersPagedResponses[keyof GetUsersPagedResponses];

export type GetUserData = {
    body?: never;
    path: {
        userId: UserId;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type GetUserErrors = {
    /**
     * Not Found
     */
    404: UserNotFoundError;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetUsersBulkData = {
    body?: never;
    path: {
        userIds: Array<UserId>;
    };
    query?: never;
    url: '/api/users/batch/{userIds}';
};

export type GetUsersBulkResponses = {
    /**
     * OK
     */
    200: Array<UserDto>;
};

export type GetUsersBulkResponse = GetUsersBulkResponses[keyof GetUsersBulkResponses];
