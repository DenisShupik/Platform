// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationService.Domain.Entities;
using NotificationService.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(WriteApplicationDbContext))]
    partial class WriteApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("notification_service")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotificationService.Domain.Entities.NotifiableEvent", b =>
                {
                    b.Property<Guid>("NotifiableEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("notifiable_event_id");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<NotifiableEventPayload>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.HasKey("NotifiableEventId")
                        .HasName("pk_notifiable_events");

                    b.ToTable("notifiable_events", "notification_service");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotifiableEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("notifiable_event_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<byte>("Channel")
                        .HasColumnType("smallint")
                        .HasColumnName("channel");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.HasKey("NotifiableEventId", "UserId", "Channel")
                        .HasName("pk_notifications");

                    b.HasIndex("NotifiableEventId")
                        .HasDatabaseName("ix_notifications_notifiable_event_id");

                    b.ToTable("notifications", "notification_service", t =>
                        {
                            t.HasCheckConstraint("CK_notifications_channel_Enum", "channel IN (0, 1)");
                        });
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.ThreadSubscription", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.PrimitiveCollection<byte[]>("Channels")
                        .IsRequired()
                        .HasColumnType("smallint[]")
                        .HasColumnName("channels");

                    b.HasKey("UserId", "ThreadId")
                        .HasName("pk_thread_subscriptions");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_thread_subscriptions_thread_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_thread_subscriptions_user_id");

                    b.ToTable("thread_subscriptions", "notification_service");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("init_identifier");

                    b.Property<byte[]>("Request")
                        .HasColumnType("bytea")
                        .HasColumnName("request");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.PrimitiveCollection<int[]>("RetryIntervals")
                        .HasColumnType("integer[]")
                        .HasColumnName("retry_intervals");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cron_tickers");

                    b.HasIndex("Expression")
                        .HasDatabaseName("IX_CronTickers_Expression");

                    b.ToTable("CronTickers", "notification_service_ticker");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CronTickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("cron_ticker_id");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_time");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("LockHolder")
                        .HasColumnType("text")
                        .HasColumnName("lock_holder");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_cron_ticker_occurrences");

                    b.HasIndex("CronTickerId")
                        .HasDatabaseName("IX_CronTickerOccurrence_CronTickerId");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_ExecutionTime");

                    b.HasIndex("CronTickerId", "ExecutionTime")
                        .IsUnique()
                        .HasDatabaseName("UQ_CronTickerId_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_Status_ExecutionTime");

                    b.ToTable("CronTickerOccurrences", "notification_service_ticker", t =>
                        {
                            t.HasCheckConstraint("CK_CronTickerOccurrences_status_Enum", "status BETWEEN 0 AND 7");
                        });
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BatchParent")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_parent");

                    b.Property<int?>("BatchRunCondition")
                        .HasColumnType("integer")
                        .HasColumnName("batch_run_condition");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_time");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("init_identifier");

                    b.Property<string>("LockHolder")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("lock_holder");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<byte[]>("Request")
                        .HasColumnType("bytea")
                        .HasColumnName("request");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.PrimitiveCollection<int[]>("RetryIntervals")
                        .HasColumnType("integer[]")
                        .HasColumnName("retry_intervals");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_time_tickers");

                    b.HasIndex("BatchParent")
                        .HasDatabaseName("ix_time_tickers_batch_parent");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_Status_ExecutionTime");

                    b.ToTable("TimeTickers", "notification_service_ticker", t =>
                        {
                            t.HasCheckConstraint("CK_TimeTickers_batch_run_condition_Enum", "batch_run_condition IN (0, 1)");

                            t.HasCheckConstraint("CK_TimeTickers_status_Enum", "status BETWEEN 0 AND 7");
                        });
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.Notification", b =>
                {
                    b.HasOne("NotificationService.Domain.Entities.NotifiableEvent", "NotifiableEvent")
                        .WithMany()
                        .HasForeignKey("NotifiableEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_notifiable_events_notifiable_event_id");

                    b.Navigation("NotifiableEvent");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.HasOne("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", "CronTicker")
                        .WithMany()
                        .HasForeignKey("CronTickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cron_ticker_occurrences_cron_tickers_cron_ticker_id");

                    b.Navigation("CronTicker");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.HasOne("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", "ParentJob")
                        .WithMany("ChildJobs")
                        .HasForeignKey("BatchParent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_time_tickers_time_tickers_batch_parent");

                    b.Navigation("ParentJob");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.Navigation("ChildJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
