// <auto-generated />
using System;
using CoreService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core_service")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.HasIndex("ForumId")
                        .HasDatabaseName("ix_categories_forum_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_categories_title");

                    b.ToTable("categories", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.ToTable("categories", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Forum", b =>
                {
                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.HasKey("ForumId")
                        .HasName("pk_forums");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_forums_title");

                    b.ToTable("forums", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.HasKey("ForumId")
                        .HasName("pk_forums");

                    b.ToTable("forums", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Post", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("PostId", "ThreadId")
                        .HasName("pk_posts");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_posts_thread_id");

                    b.ToTable("posts", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<long>("PostIdSeq")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("post_id_seq");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("ThreadId")
                        .HasName("pk_threads");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_threads_category_id");

                    b.ToTable("threads", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<long>("PostIdSeq")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("post_id_seq");

                    b.HasKey("ThreadId")
                        .HasName("pk_threads");

                    b.ToTable("threads", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Forum", null)
                        .WithMany("Categories")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_forums_forum_id");

                    b.HasOne("CoreService.Domain.Entities.ForumCategoryAddable", null)
                        .WithMany("Categories")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_forums_forum_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Category", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.CategoryThreadAddable", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_categories_category_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Forum", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.ForumCategoryAddable", "ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_forums_forum_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Post", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Thread", null)
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_threads_thread_id");

                    b.HasOne("CoreService.Domain.Entities.ThreadPostAddable", null)
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_threads_thread_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Category", null)
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_categories_category_id");

                    b.HasOne("CoreService.Domain.Entities.CategoryThreadAddable", null)
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_categories_category_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Thread", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.ThreadPostAddable", "ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_threads_thread_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Forum", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
