// <auto-generated />
using System;
using CoreService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(WriteApplicationDbContext))]
    [Migration("20251031085152_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core_service")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<Guid>("PostCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.Property<Guid>("ThreadCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_create_policy_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.HasIndex("ForumId")
                        .HasDatabaseName("ix_categories_forum_id");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_categories_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_categories_read_policy_id");

                    b.HasIndex("ThreadCreatePolicyId")
                        .HasDatabaseName("ix_categories_thread_create_policy_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_categories_title");

                    b.ToTable("categories", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryRestriction", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.HasKey("UserId", "CategoryId", "Type")
                        .HasName("pk_category_restrictions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_category_restrictions_category_id");

                    b.ToTable("category_restrictions", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_category_restrictions_type_Enum", "type BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("PostCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_categories_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_categories_read_policy_id");

                    b.ToTable("categories", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Forum", b =>
                {
                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<Guid>("CategoryCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_create_policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("PostCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.Property<Guid>("ThreadCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("thread_create_policy_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.HasKey("ForumId")
                        .HasName("pk_forums");

                    b.HasIndex("CategoryCreatePolicyId")
                        .HasDatabaseName("ix_forums_category_create_policy_id");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_forums_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_forums_read_policy_id");

                    b.HasIndex("ThreadCreatePolicyId")
                        .HasDatabaseName("ix_forums_thread_create_policy_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_forums_title");

                    b.ToTable("forums", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<Guid>("PostCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.Property<Guid>("ThreadCreatePolicyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("thread_create_policy_id");

                    b.HasKey("ForumId")
                        .HasName("pk_forums");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_forums_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_forums_read_policy_id");

                    b.HasIndex("ThreadCreatePolicyId")
                        .HasDatabaseName("ix_forums_thread_create_policy_id");

                    b.ToTable("forums", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumRestriction", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.HasKey("UserId", "ForumId", "Type")
                        .HasName("pk_forum_restrictions");

                    b.HasIndex("ForumId")
                        .HasDatabaseName("ix_forum_restrictions_forum_id");

                    b.ToTable("forum_restrictions", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_forum_restrictions_type_Enum", "type BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Grant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.HasKey("UserId", "PolicyId")
                        .HasName("pk_grants");

                    b.ToTable("grants", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Policy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("policy_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<byte>("Value")
                        .HasColumnType("smallint")
                        .HasColumnName("value");

                    b.HasKey("PolicyId")
                        .HasName("pk_policies");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_policies_parent_id");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator<byte>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Portal", b =>
                {
                    b.Property<short>("PortalId")
                        .HasColumnType("smallint")
                        .HasColumnName("portal_id");

                    b.Property<Guid>("CategoryCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_create_policy_id");

                    b.Property<Guid>("ForumCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_create_policy_id");

                    b.Property<Guid>("PostCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.Property<Guid>("ThreadCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_create_policy_id");

                    b.HasKey("PortalId")
                        .HasName("pk_portal");

                    b.HasIndex("CategoryCreatePolicyId")
                        .HasDatabaseName("ix_portal_category_create_policy_id");

                    b.HasIndex("ForumCreatePolicyId")
                        .HasDatabaseName("ix_portal_forum_create_policy_id");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_portal_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_portal_read_policy_id");

                    b.HasIndex("ThreadCreatePolicyId")
                        .HasDatabaseName("ix_portal_thread_create_policy_id");

                    b.ToTable("portal", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.PortalRestriction", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.HasKey("UserId", "Type")
                        .HasName("pk_portal_restrictions");

                    b.ToTable("portal_restrictions", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_portal_restrictions_type_Enum", "type BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("PostId")
                        .HasName("pk_posts");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_posts_thread_id");

                    b.HasIndex("ThreadId", "CreatedAt", "PostId")
                        .HasDatabaseName("ix_posts_thread_id_created_at_post_id");

                    b.ToTable("posts", "core_service");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("PostCreatePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_create_policy_id");

                    b.Property<Guid>("ReadPolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("read_policy_id");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.HasKey("ThreadId")
                        .HasName("pk_threads");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_threads_category_id");

                    b.HasIndex("PostCreatePolicyId")
                        .HasDatabaseName("ix_threads_post_create_policy_id");

                    b.HasIndex("ReadPolicyId")
                        .HasDatabaseName("ix_threads_read_policy_id");

                    b.ToTable("threads", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_threads_status_Enum", "status IN (0, 1)");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("ThreadId")
                        .HasName("pk_threads");

                    b.ToTable("threads", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_threads_status_Enum", "status IN (0, 1)");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadRestriction", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.HasKey("UserId", "ThreadId", "Type")
                        .HasName("pk_thread_restrictions");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_thread_restrictions_thread_id");

                    b.ToTable("thread_restrictions", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_thread_restrictions_type_Enum", "type BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryCreatePolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCreatePolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.PostCreatePolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)5);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ReadPolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadApprovePolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)4);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadCreatePolicy", b =>
                {
                    b.HasBaseType("CoreService.Domain.Entities.Policy");

                    b.ToTable("policies", "core_service", t =>
                        {
                            t.HasCheckConstraint("CK_policies_type_Enum", "type BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_policies_value_Enum", "value BETWEEN 0 AND 2");
                        });

                    b.HasDiscriminator().HasValue((byte)3);
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Forum", null)
                        .WithMany("Categories")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_forums_forum_id");

                    b.HasOne("CoreService.Domain.Entities.ForumCategoryAddable", null)
                        .WithMany("Categories")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_forums_forum_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_policies_read_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany()
                        .HasForeignKey("ThreadCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_policies_thread_create_policy_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryRestriction", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_restrictions_categories_category_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Category", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.CategoryThreadAddable", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_categories_category_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", "PostCreatePolicy")
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", "ReadPolicy")
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_policies_read_policy_id");

                    b.Navigation("PostCreatePolicy");

                    b.Navigation("ReadPolicy");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Forum", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.CategoryCreatePolicy", null)
                        .WithMany()
                        .HasForeignKey("CategoryCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_category_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.PostCreatePolicy", null)
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.ReadPolicy", null)
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_read_policy_id");

                    b.HasOne("CoreService.Domain.Entities.ThreadCreatePolicy", null)
                        .WithMany()
                        .HasForeignKey("ThreadCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_thread_create_policy_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Forum", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.ForumCategoryAddable", "ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_forums_forum_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", "PostCreatePolicy")
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", "ReadPolicy")
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_read_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", "ThreadCreatePolicy")
                        .WithMany()
                        .HasForeignKey("ThreadCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forums_policies_thread_create_policy_id");

                    b.Navigation("PostCreatePolicy");

                    b.Navigation("ReadPolicy");

                    b.Navigation("ThreadCreatePolicy");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumRestriction", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Forum", null)
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_restrictions_forums_forum_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Policy", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany("AddedPolicies")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_policies_policies_parent_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Portal", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.CategoryCreatePolicy", "CategoryCreatePolicy")
                        .WithMany()
                        .HasForeignKey("CategoryCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_portal_policies_category_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.ForumCreatePolicy", "ForumCreatePolicy")
                        .WithMany()
                        .HasForeignKey("ForumCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_portal_policies_forum_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.PostCreatePolicy", "PostCreatePolicy")
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_portal_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.ReadPolicy", "ReadPolicy")
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_portal_policies_read_policy_id");

                    b.HasOne("CoreService.Domain.Entities.ThreadCreatePolicy", "ThreadCreatePolicy")
                        .WithMany()
                        .HasForeignKey("ThreadCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_portal_policies_thread_create_policy_id");

                    b.Navigation("CategoryCreatePolicy");

                    b.Navigation("ForumCreatePolicy");

                    b.Navigation("PostCreatePolicy");

                    b.Navigation("ReadPolicy");

                    b.Navigation("ThreadCreatePolicy");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Post", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Thread", null)
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_threads_thread_id");

                    b.HasOne("CoreService.Domain.Entities.ThreadPostAddable", null)
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_threads_thread_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Category", null)
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_categories_category_id");

                    b.HasOne("CoreService.Domain.Entities.CategoryThreadAddable", null)
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_categories_category_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany()
                        .HasForeignKey("PostCreatePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_policies_post_create_policy_id");

                    b.HasOne("CoreService.Domain.Entities.Policy", null)
                        .WithMany()
                        .HasForeignKey("ReadPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_policies_read_policy_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Thread", null)
                        .WithOne()
                        .HasForeignKey("CoreService.Domain.Entities.ThreadPostAddable", "ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_threads_threads_thread_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadRestriction", b =>
                {
                    b.HasOne("CoreService.Domain.Entities.Thread", null)
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_thread_restrictions_threads_thread_id");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.CategoryThreadAddable", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Forum", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ForumCategoryAddable", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Policy", b =>
                {
                    b.Navigation("AddedPolicies");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.Thread", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CoreService.Domain.Entities.ThreadPostAddable", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
