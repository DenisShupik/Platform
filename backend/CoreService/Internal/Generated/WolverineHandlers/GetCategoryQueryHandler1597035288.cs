// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetCategoryQueryHandler1597035288
    public class GetCategoryQueryHandler1597035288 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public GetCategoryQueryHandler1597035288(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: CoreService.Infrastructure.Persistence.ApplicationDbContext Lifetime: Scoped ImplementationFactory: CoreService.Infrastructure.Persistence.ApplicationDbContext <AddInfrastructureServices>b__0_0(System.IServiceProvider)
            * The service registration for CoreService.Infrastructure.Persistence.ApplicationDbContext is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var categoryReadRepository = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<CoreService.Application.Interfaces.ICategoryReadRepository>(serviceScope.ServiceProvider);
            // The actual message body
            var getCategoryQuery = (CoreService.Application.UseCases.GetCategoryQuery)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "CoreService.Application.UseCases.GetCategoryQueryHandler");
            var getCategoryQueryHandler = new CoreService.Application.UseCases.GetCategoryQueryHandler(categoryReadRepository);
            
            // The actual message execution
            var outgoing1 = await getCategoryQueryHandler.HandleAsync(getCategoryQuery, cancellation).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetCategoryQueryHandler1597035288
    
    
}

