// <auto-generated/>
#pragma warning disable
using FluentValidation;
using Microsoft.Extensions.DependencyInjection;
using Wolverine.FluentValidation;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetCategoriesLatestPostQueryHandler33157779
    public class GetCategoriesLatestPostQueryHandler33157779 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.FluentValidation.IFailureAction<CoreService.Application.UseCases.GetCategoriesPostsLatestQuery> _failureAction;
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;
        private readonly FluentValidation.IValidator<CoreService.Application.UseCases.GetCategoriesPostsLatestQuery> _validator;

        public GetCategoriesLatestPostQueryHandler33157779(Wolverine.FluentValidation.IFailureAction<CoreService.Application.UseCases.GetCategoriesPostsLatestQuery> failureAction, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, FluentValidation.IValidator<CoreService.Application.UseCases.GetCategoriesPostsLatestQuery> validator)
        {
            _failureAction = failureAction;
            _serviceScopeFactory = serviceScopeFactory;
            _validator = validator;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: CoreService.Infrastructure.Persistence.ApplicationDbContext Lifetime: Scoped ImplementationFactory: CoreService.Infrastructure.Persistence.ApplicationDbContext <AddInfrastructureServices>b__0_0(System.IServiceProvider)
            * The service registration for CoreService.Infrastructure.Persistence.ApplicationDbContext is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var postReadRepository = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<CoreService.Application.Interfaces.IPostReadRepository>(serviceScope.ServiceProvider);
            // The actual message body
            var getCategoriesLatestPostQuery = (CoreService.Application.UseCases.GetCategoriesPostsLatestQuery)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "CoreService.Application.UseCases.GetCategoriesLatestPostQueryHandler");
            await Wolverine.FluentValidation.Internals.FluentValidationExecutor.ExecuteOne<CoreService.Application.UseCases.GetCategoriesPostsLatestQuery>(_validator, _failureAction, getCategoriesLatestPostQuery).ConfigureAwait(false);
            var getCategoriesLatestPostQueryHandler = new CoreService.Application.UseCases.GetCategoriesPostsLatestQueryHandler(postReadRepository);
            
            // The actual message execution
            var outgoing1 = await getCategoriesLatestPostQueryHandler.HandleAsync(getCategoriesLatestPostQuery, cancellation).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetCategoriesLatestPostQueryHandler33157779
    
    
}

