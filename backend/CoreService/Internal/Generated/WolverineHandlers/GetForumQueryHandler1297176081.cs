// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetForumQueryHandler1297176081
    public class GetForumQueryHandler1297176081 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public GetForumQueryHandler1297176081(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: CoreService.Infrastructure.Persistence.ApplicationDbContext Lifetime: Scoped ImplementationFactory: CoreService.Infrastructure.Persistence.ApplicationDbContext <AddInfrastructureServices>b__0_0(System.IServiceProvider)
            * The service registration for CoreService.Infrastructure.Persistence.ApplicationDbContext is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var forumReadRepository = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<CoreService.Application.Interfaces.IForumReadRepository>(serviceScope.ServiceProvider);
            // The actual message body
            var getForumQuery = (CoreService.Application.UseCases.GetForumQuery)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "CoreService.Application.UseCases.GetForumQueryHandler");
            var getForumQueryHandler = new CoreService.Application.UseCases.GetForumQueryHandler(forumReadRepository);
            
            // The actual message execution
            var outgoing1 = await getForumQueryHandler.HandleAsync(getForumQuery, cancellation).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetForumQueryHandler1297176081
    
    
}

