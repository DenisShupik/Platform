// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetThreadQueryHandler2132174304
    public class GetThreadQueryHandler2132174304 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public GetThreadQueryHandler2132174304(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: CoreService.Infrastructure.Persistence.ApplicationDbContext Lifetime: Scoped ImplementationFactory: CoreService.Infrastructure.Persistence.ApplicationDbContext <AddInfrastructureServices>b__0_0(System.IServiceProvider)
            * The service registration for CoreService.Infrastructure.Persistence.ApplicationDbContext is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var threadReadRepository = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<CoreService.Application.Interfaces.IThreadReadRepository>(serviceScope.ServiceProvider);
            // The actual message body
            var getThreadQuery = (CoreService.Application.UseCases.GetThreadQuery)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "CoreService.Application.UseCases.GetThreadQueryHandler");
            var getThreadQueryHandler = new CoreService.Application.UseCases.GetThreadQueryHandler(threadReadRepository);
            
            // The actual message execution
            var outgoing1 = await getThreadQueryHandler.HandleAsync(getThreadQuery, cancellation).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetThreadQueryHandler2132174304
    
    
}

