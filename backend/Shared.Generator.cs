using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool returnValue) => ReturnValue = returnValue;
        public bool ReturnValue { get; }
    }
}

namespace Shared.Generator
{
    public static class StringExtensions
    {
        public static string ToCamelCase(this string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);
    }

    public static class SymbolExtensions
    {
        public static ITypeSymbol? TryGetUnderlyingType(this IPropertySymbol propertySymbol)
        {
            var type = propertySymbol.Type;

            if (type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T)
            {
                var namedType = (INamedTypeSymbol)type;
                return namedType.TypeArguments[0];
            }

            if (type.IsReferenceType && propertySymbol.NullableAnnotation == NullableAnnotation.Annotated)
            {
                return type.WithNullableAnnotation(NullableAnnotation.NotAnnotated);
            }

            return null;
        }

        public static TypeSyntax GetGlobalName(this ITypeSymbol type) =>
            ParseTypeName(type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));

        public static TypeSyntax GetGlobalNestedName(this ITypeSymbol type, string name) =>
            ParseTypeName(type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) + "." + name);

        public static bool HasInitializer(this IFieldSymbol field)
        {
            return field.DeclaringSyntaxReferences.Any(syntaxRef =>
            {
                var syntax = syntaxRef.GetSyntax();
                if (syntax is VariableDeclaratorSyntax declarator)
                {
                    return declarator.Initializer != null;
                }

                return false;
            });
        }
    }

    public static class SyntaxExtensions
    {
        public static TSyntax ApplyGeneratorDefaults<TSyntax>(this TSyntax node) where TSyntax : SyntaxNode
        {
            return node.WithLeadingTrivia(
                    Comment("// <auto-generated />"),
                    Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))
                )
                .NormalizeWhitespace();
        }

        public static ClassDeclarationSyntax WithoutBody(this ClassDeclarationSyntax classDeclarationSyntax)
        {
            return classDeclarationSyntax
                .WithOpenBraceToken(default)
                .WithCloseBraceToken(default)
                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken));
        }

        public static MemberAccessExpressionSyntax Member(this TypeSyntax type, string name) =>
            MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, type, IdentifierName(name));

        public static MemberAccessExpressionSyntax Member(this ExpressionSyntax type, string name) =>
            MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, type, IdentifierName(name));
        
        public static MemberAccessExpressionSyntax GenericMember(this ExpressionSyntax type, string name,
            params TypeSyntax[] arguments) =>
            MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, type,
                GenericName(Identifier(name)).AddTypeArgumentListArguments(arguments));
    }
}