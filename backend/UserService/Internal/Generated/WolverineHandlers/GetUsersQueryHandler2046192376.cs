// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetUsersQueryHandler2046192376
    public class GetUsersQueryHandler2046192376 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public GetUsersQueryHandler2046192376(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: UserService.Infrastructure.Persistence.ApplicationDbContext Lifetime: Scoped ImplementationFactory: UserService.Infrastructure.Persistence.ApplicationDbContext <AddInfrastructureServices>b__0_0(System.IServiceProvider)
            * The service registration for UserService.Infrastructure.Persistence.ApplicationDbContext is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var userReadRepository = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<UserService.Application.Interfaces.IUserReadRepository>(serviceScope.ServiceProvider);
            // The actual message body
            var getUsersQuery = (UserService.Application.UseCases.GetUsersQuery)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "UserService.Application.UseCases.GetUsersQueryHandler");
            var getUsersQueryHandler = new UserService.Application.UseCases.GetUsersQueryHandler(userReadRepository);
            
            // The actual message execution
            var outgoing1 = await getUsersQueryHandler.HandleAsync(getUsersQuery, cancellation).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetUsersQueryHandler2046192376
    
    
}

