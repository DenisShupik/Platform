// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TopicService.Infrastructure.Persistence;

#nullable disable

namespace TopicService.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("topic_service")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TopicService.Domain.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_categories_section_id");

                    b.ToTable("categories", "topic_service");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Post", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint")
                        .HasColumnName("topic_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.HasKey("PostId", "TopicId")
                        .HasName("pk_posts");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_posts_topic_id");

                    b.ToTable("posts", "topic_service");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Section", b =>
                {
                    b.Property<long>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SectionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("SectionId")
                        .HasName("pk_sections");

                    b.ToTable("sections", "topic_service");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Topic", b =>
                {
                    b.Property<long>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("topic_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TopicId"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<long>("PostIdSeq")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id_seq");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("TopicId")
                        .HasName("pk_topics");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_topics_category_id");

                    b.ToTable("topics", "topic_service");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Category", b =>
                {
                    b.HasOne("TopicService.Domain.Entities.Section", null)
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_sections_section_id");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Post", b =>
                {
                    b.HasOne("TopicService.Domain.Entities.Topic", null)
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_topics_topic_id");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Topic", b =>
                {
                    b.HasOne("TopicService.Domain.Entities.Category", null)
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_topics_categories_category_id");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("TopicService.Domain.Entities.Topic", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
