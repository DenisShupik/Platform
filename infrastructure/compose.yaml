x-common-env: &common-env
  ASPNETCORE_ENVIRONMENT: Production
  DOTNET_ENVIRONMENT: Production
  KeycloakOptions__MetadataAddress: https://${PUBLIC_APP_DOMAIN}/auth/realms/${PUBLIC_APP_KEYCLOAK_REALM}/.well-known/openid-configuration
  KeycloakOptions__Issuer: https://${PUBLIC_APP_DOMAIN}/auth/realms/${PUBLIC_APP_KEYCLOAK_REALM}
  KeycloakOptions__Audience: ${PUBLIC_APP_KEYCLOAK_USER_CLIENT_ID}
  KeycloakOptions__Realm: ${PUBLIC_APP_KEYCLOAK_REALM}

services:

  keycloak-postgres:
    image: postgres:17.4
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
    environment:
      POSTGRES_DB: ${KC_POSTGRES_DB}
      POSTGRES_USER: ${KC_DB_USERNAME}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    command:
     - start
     - --import-realm
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_URL: "jdbc:postgresql://keycloak-postgres:5432/${KC_POSTGRES_DB}"
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KK_TO_RMQ_URL: rabbitmq
      KK_TO_RMQ_VHOST: "/"
      KK_TO_RMQ_USERNAME: ${RABBITMQ_USERNAME}
      KK_TO_RMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      PUBLIC_APP_KEYCLOAK_REALM: ${PUBLIC_APP_KEYCLOAK_REALM}
      PUBLIC_APP_KEYCLOAK_USER_CLIENT_ID: ${PUBLIC_APP_KEYCLOAK_USER_CLIENT_ID}
      PRIVATE_APP_KEYCLOAK_SERVICE_CLIENT_ID: ${PRIVATE_APP_KEYCLOAK_SERVICE_CLIENT_ID}
      PRIVATE_APP_KEYCLOAK_SERVICE_CLIENT_SECRET: ${PRIVATE_APP_KEYCLOAK_SERVICE_CLIENT_SECRET}
      KC_HOSTNAME: ${PUBLIC_APP_DOMAIN}
      KC_HTTP_ENABLED: true
      HTTP_ADDRESS_FORWARDING: true
      KC_HTTP_RELATIVE_PATH: /auth
      KC_PROXY_HEADERS: xforwarded
    volumes:
      - ./configs/keycloak-to-rabbit-3.0.5.jar:/opt/keycloak/providers/keycloak-to-rabbit-3.0.5.jar:ro
      - ./configs/keycloak.json:/opt/keycloak/data/import/realm.json:ro
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:4.0.8-management
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network

  postgres:
    image: postgres:17.4
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network

  minio:
    image: minio/minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    entrypoint: [ "/bin/sh", "/init/init.sh" ]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      # MINIO_SERVER_URL: https://${PUBLIC_APP_DOMAIN}/files
      MINIO_BROWSER_REDIRECT_URL: https://${PUBLIC_APP_DOMAIN}/files/console
    volumes:
      - minio-data:/data
      - ./configs/minio.sh:/init/init.sh:ro
    networks:
      - app-network

  nginx:
    image: nginx:stable
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - keycloak
    networks:
      - app-network

  core-service:
    image: backend
    restart: unless-stopped
    environment:
      <<: *common-env
      CoreServiceOptions__ConnectionString: Host=${POSTGRES_DB};Port=5432;Database=platform_db;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Minimum Pool Size=0;Maximum Pool Size=100;
    command: ./CoreService/CoreService.dll
    networks:
      - app-network

  file-service:
    image: backend
    restart: unless-stopped
    environment:
      <<: *common-env
      S3Options__AccessKey: ${MINIO_ROOT_USER}
      S3Options__SecretKey: ${MINIO_ROOT_PASSWORD}
      S3Options__ServiceURL: http://minio:9000
    command: ./FileService/FileService.dll
    networks:
      - app-network

  user-service:
    image: backend
    restart: unless-stopped
    environment:
      <<: *common-env
      UserServiceOptions__ConnectionString: Host=${POSTGRES_DB};Port=5432;Database=platform_db;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Minimum Pool Size=0;Maximum Pool Size=100;
      RabbitMqOptions__Host: rabbitmq
      RabbitMqOptions__Username: ${RABBITMQ_USERNAME}
      RabbitMqOptions__Password: ${RABBITMQ_PASSWORD}
    command: ./UserService/UserService.dll
    networks:
      - app-network

  api-gateway:
    image: backend
    restart: unless-stopped
    environment:
      <<: *common-env
      ReverseProxy__Swagger__IsCommonDocument: true
      ReverseProxy__Swagger__CommonDocumentName: gateway
      ReverseProxy__Routes__coreServiceForums__ClusterId: coreServiceCluster
      ReverseProxy__Routes__coreServiceForums__Match__Path: /api/forums/{**catch-all}
      ReverseProxy__Routes__coreServiceCategories__ClusterId: coreServiceCluster
      ReverseProxy__Routes__coreServiceCategories__Match__Path: /api/categories/{**catch-all}
      ReverseProxy__Routes__coreServiceThreads__ClusterId: coreServiceCluster
      ReverseProxy__Routes__coreServiceThreads__Match__Path: /api/threads/{**catch-all}
      ReverseProxy__Routes__coreServicePosts__ClusterId: coreServiceCluster
      ReverseProxy__Routes__coreServicePosts__Match__Path: /api/posts/{**catch-all}
      ReverseProxy__Routes__userService__ClusterId: userServiceCluster
      ReverseProxy__Routes__userService__Match__Path: /api/users/{**catch-all}
      ReverseProxy__Routes__fileService__ClusterId: fileServiceCluster
      ReverseProxy__Routes__fileService__Match__Path: /api/avatars/{**catch-all}
      ReverseProxy__Clusters__coreServiceCluster__Destinations__coreServiceDestination__Address: http://core-service:8080
      ReverseProxy__Clusters__coreServiceCluster__Destinations__coreServiceDestination__Swaggers__0__Paths__0: /swagger/v1/swagger.json
      ReverseProxy__Clusters__userServiceCluster__Destinations__userServiceDestination__Address: http://user-service:8080
      ReverseProxy__Clusters__userServiceCluster__Destinations__userServiceDestination__Swaggers__0__Paths__0: /swagger/v1/swagger.json
      ReverseProxy__Clusters__fileServiceCluster__Destinations__fileServiceDestination__Address: http://file-service:8080
      ReverseProxy__Clusters__fileServiceCluster__Destinations__fileServiceDestination__Swaggers__0__Paths__0: /swagger/v1/swagger.json
      Kestrel__Endpoints__Https__Protocols: Http1AndHttp2
      Kestrel__Endpoints__Https__Url: http://+:8000
    command: ./ApiGateway/ApiGateway.dll
    depends_on:
      - core-service
      - file-service
      - user-service
    networks:
      - app-network

  frontend:
    image: frontend
    restart: unless-stopped
    environment:
      PUBLIC_KEYCLOAK_URL: https://${PUBLIC_APP_DOMAIN}/auth
      PUBLIC_KEYCLOAK_REALM: ${PUBLIC_APP_KEYCLOAK_REALM}
      PUBLIC_KEYCLOAK_CLIENT_ID: ${PUBLIC_APP_KEYCLOAK_USER_CLIENT_ID}
      PUBLIC_AVATAR_URL: https://${PUBLIC_APP_DOMAIN}/files/avatars
      PUBLIC_CSR_API_URL: https://${PUBLIC_APP_DOMAIN}
      PUBLIC_SSR_API_URL: http://api-gateway:8000
      PUBLIC_APP_NAME: FORUM
    networks:
      - app-network

volumes:
  keycloak-postgres-data:
  rabbitmq-data:
  postgres-data:
  minio-data:


networks:
  app-network:
    driver: bridge
